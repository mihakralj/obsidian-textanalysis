/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// node_modules/text-readability/node_modules/syllable/node_modules/pluralize/pluralize.js
var require_pluralize = __commonJS({
  "node_modules/text-readability/node_modules/syllable/node_modules/pluralize/pluralize.js"(exports, module2) {
    (function(root, pluralize2) {
      if (typeof require === "function" && typeof exports === "object" && typeof module2 === "object") {
        module2.exports = pluralize2();
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return pluralize2();
        });
      } else {
        root.pluralize = pluralize2();
      }
    })(exports, function() {
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};
      function sanitizeRule(rule) {
        if (typeof rule === "string") {
          return new RegExp("^" + rule + "$", "i");
        }
        return rule;
      }
      function restoreCase(word, token) {
        if (word === token)
          return token;
        if (word === word.toUpperCase())
          return token.toUpperCase();
        if (word[0] === word[0].toUpperCase()) {
          return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
        }
        return token.toLowerCase();
      }
      function interpolate(str, args) {
        return str.replace(/\$(\d{1,2})/g, function(match, index) {
          return args[index] || "";
        });
      }
      function replace(word, rule) {
        return word.replace(rule[0], function(match, index) {
          var result = interpolate(rule[1], arguments);
          if (match === "") {
            return restoreCase(word[index - 1], result);
          }
          return restoreCase(match, result);
        });
      }
      function sanitizeWord(token, word, rules) {
        if (!token.length || uncountables.hasOwnProperty(token)) {
          return word;
        }
        var len = rules.length;
        while (len--) {
          var rule = rules[len];
          if (rule[0].test(word))
            return replace(word, rule);
        }
        return word;
      }
      function replaceWord(replaceMap, keepMap, rules) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
          }
          if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
          }
          return sanitizeWord(token, word, rules);
        };
      }
      function checkWord(replaceMap, keepMap, rules, bool) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token))
            return true;
          if (replaceMap.hasOwnProperty(token))
            return false;
          return sanitizeWord(token, token, rules) === token;
        };
      }
      function pluralize2(word, count, inclusive) {
        var pluralized = count === 1 ? pluralize2.singular(word) : pluralize2.plural(word);
        return (inclusive ? count + " " : "") + pluralized;
      }
      pluralize2.plural = replaceWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.isPlural = checkWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.singular = replaceWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.isSingular = checkWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.addPluralRule = function(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addSingularRule = function(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addUncountableRule = function(word) {
        if (typeof word === "string") {
          uncountables[word.toLowerCase()] = true;
          return;
        }
        pluralize2.addPluralRule(word, "$0");
        pluralize2.addSingularRule(word, "$0");
      };
      pluralize2.addIrregularRule = function(single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();
        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };
      [
        // Pronouns.
        ["I", "we"],
        ["me", "us"],
        ["he", "they"],
        ["she", "they"],
        ["them", "them"],
        ["myself", "ourselves"],
        ["yourself", "yourselves"],
        ["itself", "themselves"],
        ["herself", "themselves"],
        ["himself", "themselves"],
        ["themself", "themselves"],
        ["is", "are"],
        ["was", "were"],
        ["has", "have"],
        ["this", "these"],
        ["that", "those"],
        // Words ending in with a consonant and `o`.
        ["echo", "echoes"],
        ["dingo", "dingoes"],
        ["volcano", "volcanoes"],
        ["tornado", "tornadoes"],
        ["torpedo", "torpedoes"],
        // Ends with `us`.
        ["genus", "genera"],
        ["viscus", "viscera"],
        // Ends with `ma`.
        ["stigma", "stigmata"],
        ["stoma", "stomata"],
        ["dogma", "dogmata"],
        ["lemma", "lemmata"],
        ["schema", "schemata"],
        ["anathema", "anathemata"],
        // Other irregular rules.
        ["ox", "oxen"],
        ["axe", "axes"],
        ["die", "dice"],
        ["yes", "yeses"],
        ["foot", "feet"],
        ["eave", "eaves"],
        ["goose", "geese"],
        ["tooth", "teeth"],
        ["quiz", "quizzes"],
        ["human", "humans"],
        ["proof", "proofs"],
        ["carve", "carves"],
        ["valve", "valves"],
        ["looey", "looies"],
        ["thief", "thieves"],
        ["groove", "grooves"],
        ["pickaxe", "pickaxes"],
        ["whiskey", "whiskies"]
      ].forEach(function(rule) {
        return pluralize2.addIrregularRule(rule[0], rule[1]);
      });
      [
        [/s?$/i, "s"],
        [/[^\u0000-\u007F]$/i, "$0"],
        [/([^aeiou]ese)$/i, "$1"],
        [/(ax|test)is$/i, "$1es"],
        [/(alias|[^aou]us|tlas|gas|ris)$/i, "$1es"],
        [/(e[mn]u)s?$/i, "$1s"],
        [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, "$1"],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
        [/(seraph|cherub)(?:im)?$/i, "$1im"],
        [/(her|at|gr)o$/i, "$1oes"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
        [/sis$/i, "ses"],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
        [/([^aeiouy]|qu)y$/i, "$1ies"],
        [/([^ch][ieo][ln])ey$/i, "$1ies"],
        [/(x|ch|ss|sh|zz)$/i, "$1es"],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
        [/(m|l)(?:ice|ouse)$/i, "$1ice"],
        [/(pe)(?:rson|ople)$/i, "$1ople"],
        [/(child)(?:ren)?$/i, "$1ren"],
        [/eaux$/i, "$0"],
        [/m[ae]n$/i, "men"],
        ["thou", "you"]
      ].forEach(function(rule) {
        return pluralize2.addPluralRule(rule[0], rule[1]);
      });
      [
        [/s$/i, ""],
        [/(ss)$/i, "$1"],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
        [/ies$/i, "y"],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
        [/\b(mon|smil)ies$/i, "$1ey"],
        [/(m|l)ice$/i, "$1ouse"],
        [/(seraph|cherub)im$/i, "$1"],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, "$1"],
        [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, "$1sis"],
        [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
        [/(test)(?:is|es)$/i, "$1is"],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
        [/(alumn|alg|vertebr)ae$/i, "$1a"],
        [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
        [/(matr|append)ices$/i, "$1ix"],
        [/(pe)(rson|ople)$/i, "$1rson"],
        [/(child)ren$/i, "$1"],
        [/(eau)x?$/i, "$1"],
        [/men$/i, "man"]
      ].forEach(function(rule) {
        return pluralize2.addSingularRule(rule[0], rule[1]);
      });
      [
        // Singular words with no plurals.
        "adulthood",
        "advice",
        "agenda",
        "aid",
        "alcohol",
        "ammo",
        "anime",
        "athletics",
        "audio",
        "bison",
        "blood",
        "bream",
        "buffalo",
        "butter",
        "carp",
        "cash",
        "chassis",
        "chess",
        "clothing",
        "cod",
        "commerce",
        "cooperation",
        "corps",
        "debris",
        "diabetes",
        "digestion",
        "elk",
        "energy",
        "equipment",
        "excretion",
        "expertise",
        "flounder",
        "fun",
        "gallows",
        "garbage",
        "graffiti",
        "headquarters",
        "health",
        "herpes",
        "highjinks",
        "homework",
        "housework",
        "information",
        "jeans",
        "justice",
        "kudos",
        "labour",
        "literature",
        "machinery",
        "mackerel",
        "mail",
        "media",
        "mews",
        "moose",
        "music",
        "manga",
        "news",
        "pike",
        "plankton",
        "pliers",
        "pollution",
        "premises",
        "rain",
        "research",
        "rice",
        "salmon",
        "scissors",
        "series",
        "sewage",
        "shambles",
        "shrimp",
        "species",
        "staff",
        "swine",
        "tennis",
        "traffic",
        "transporation",
        "trout",
        "tuna",
        "wealth",
        "welfare",
        "whiting",
        "wildebeest",
        "wildlife",
        "you",
        // Regexes.
        /[^aeiou]ese$/i,
        // "chinese", "japanese"
        /deer$/i,
        // "deer", "reindeer"
        /fish$/i,
        // "fish", "blowfish", "angelfish"
        /measles$/i,
        /o[iu]s$/i,
        // "carnivorous"
        /pox$/i,
        // "chickpox", "smallpox"
        /sheep$/i
      ].forEach(pluralize2.addUncountableRule);
      return pluralize2;
    });
  }
});

// node_modules/normalize-strings/charmap.json
var require_charmap = __commonJS({
  "node_modules/normalize-strings/charmap.json"(exports, module2) {
    module2.exports = { "105": "i", "192": "A", "193": "A", "194": "A", "195": "A", "196": "A", "197": "A", "199": "C", "200": "E", "201": "E", "202": "E", "203": "E", "204": "I", "205": "I", "206": "I", "207": "I", "209": "N", "210": "O", "211": "O", "212": "O", "213": "O", "214": "O", "216": "O", "217": "U", "218": "U", "219": "U", "220": "U", "221": "Y", "224": "a", "225": "a", "226": "a", "227": "a", "228": "a", "229": "a", "231": "c", "232": "e", "233": "e", "234": "e", "235": "e", "236": "i", "237": "i", "238": "i", "239": "i", "241": "n", "242": "o", "243": "o", "244": "o", "245": "o", "246": "o", "248": "o", "249": "u", "250": "u", "251": "u", "252": "u", "253": "y", "255": "y", "256": "A", "257": "a", "258": "A", "259": "a", "260": "A", "261": "a", "262": "C", "263": "c", "264": "C", "265": "c", "266": "C", "267": "c", "268": "C", "269": "c", "270": "D", "271": "d", "272": "D", "273": "d", "274": "E", "275": "e", "276": "E", "277": "e", "278": "E", "279": "e", "280": "E", "281": "e", "282": "E", "283": "e", "284": "G", "285": "g", "286": "G", "287": "g", "288": "G", "289": "g", "290": "G", "291": "g", "292": "H", "293": "h", "294": "H", "295": "h", "296": "I", "297": "i", "298": "I", "299": "i", "300": "I", "301": "i", "302": "I", "303": "i", "304": "I", "308": "J", "309": "j", "310": "K", "311": "k", "313": "L", "314": "l", "315": "L", "316": "l", "317": "L", "318": "l", "319": "L", "320": "l", "321": "L", "322": "l", "323": "N", "324": "n", "325": "N", "326": "n", "327": "N", "328": "n", "332": "O", "333": "o", "334": "O", "335": "o", "336": "O", "337": "o", "338": "O", "339": "o", "340": "R", "341": "r", "342": "R", "343": "r", "344": "R", "345": "r", "346": "S", "347": "s", "348": "S", "349": "s", "350": "S", "351": "s", "352": "S", "353": "s", "354": "T", "355": "t", "356": "T", "357": "t", "358": "T", "359": "t", "360": "U", "361": "u", "362": "U", "363": "u", "364": "U", "365": "u", "366": "U", "367": "u", "368": "U", "369": "u", "370": "U", "371": "u", "372": "W", "373": "w", "374": "Y", "375": "y", "376": "Y", "377": "Z", "378": "z", "379": "Z", "380": "z", "381": "Z", "382": "z", "384": "b", "385": "B", "386": "B", "387": "b", "390": "O", "391": "C", "392": "c", "393": "D", "394": "D", "395": "D", "396": "d", "398": "E", "400": "E", "401": "F", "402": "f", "403": "G", "407": "I", "408": "K", "409": "k", "410": "l", "412": "M", "413": "N", "414": "n", "415": "O", "416": "O", "417": "o", "420": "P", "421": "p", "422": "R", "427": "t", "428": "T", "429": "t", "430": "T", "431": "U", "432": "u", "434": "V", "435": "Y", "436": "y", "437": "Z", "438": "z", "461": "A", "462": "a", "463": "I", "464": "i", "465": "O", "466": "o", "467": "U", "468": "u", "477": "e", "484": "G", "485": "g", "486": "G", "487": "g", "488": "K", "489": "k", "490": "O", "491": "o", "500": "G", "501": "g", "504": "N", "505": "n", "512": "A", "513": "a", "514": "A", "515": "a", "516": "E", "517": "e", "518": "E", "519": "e", "520": "I", "521": "i", "522": "I", "523": "i", "524": "O", "525": "o", "526": "O", "527": "o", "528": "R", "529": "r", "530": "R", "531": "r", "532": "U", "533": "u", "534": "U", "535": "u", "536": "S", "537": "s", "538": "T", "539": "t", "542": "H", "543": "h", "544": "N", "545": "d", "548": "Z", "549": "z", "550": "A", "551": "a", "552": "E", "553": "e", "558": "O", "559": "o", "562": "Y", "563": "y", "564": "l", "565": "n", "566": "t", "567": "j", "570": "A", "571": "C", "572": "c", "573": "L", "574": "T", "575": "s", "576": "z", "579": "B", "580": "U", "581": "V", "582": "E", "583": "e", "584": "J", "585": "j", "586": "Q", "587": "q", "588": "R", "589": "r", "590": "Y", "591": "y", "592": "a", "593": "a", "595": "b", "596": "o", "597": "c", "598": "d", "599": "d", "600": "e", "603": "e", "604": "e", "605": "e", "606": "e", "607": "j", "608": "g", "609": "g", "610": "g", "613": "h", "614": "h", "616": "i", "618": "i", "619": "l", "620": "l", "621": "l", "623": "m", "624": "m", "625": "m", "626": "n", "627": "n", "628": "n", "629": "o", "633": "r", "634": "r", "635": "r", "636": "r", "637": "r", "638": "r", "639": "r", "640": "r", "641": "r", "642": "s", "647": "t", "648": "t", "649": "u", "651": "v", "652": "v", "653": "w", "654": "y", "655": "y", "656": "z", "657": "z", "663": "c", "665": "b", "666": "e", "667": "g", "668": "h", "669": "j", "670": "k", "671": "l", "672": "q", "686": "h", "688": "h", "690": "j", "691": "r", "692": "r", "694": "r", "695": "w", "696": "y", "737": "l", "738": "s", "739": "x", "780": "v", "829": "x", "851": "x", "867": "a", "868": "e", "869": "i", "870": "o", "871": "u", "872": "c", "873": "d", "874": "h", "875": "m", "876": "r", "877": "t", "878": "v", "879": "x", "7424": "a", "7427": "b", "7428": "c", "7429": "d", "7431": "e", "7432": "e", "7433": "i", "7434": "j", "7435": "k", "7436": "l", "7437": "m", "7438": "n", "7439": "o", "7440": "o", "7441": "o", "7442": "o", "7443": "o", "7446": "o", "7447": "o", "7448": "p", "7449": "r", "7450": "r", "7451": "t", "7452": "u", "7453": "u", "7454": "u", "7455": "m", "7456": "v", "7457": "w", "7458": "z", "7522": "i", "7523": "r", "7524": "u", "7525": "v", "7680": "A", "7681": "a", "7682": "B", "7683": "b", "7684": "B", "7685": "b", "7686": "B", "7687": "b", "7690": "D", "7691": "d", "7692": "D", "7693": "d", "7694": "D", "7695": "d", "7696": "D", "7697": "d", "7698": "D", "7699": "d", "7704": "E", "7705": "e", "7706": "E", "7707": "e", "7710": "F", "7711": "f", "7712": "G", "7713": "g", "7714": "H", "7715": "h", "7716": "H", "7717": "h", "7718": "H", "7719": "h", "7720": "H", "7721": "h", "7722": "H", "7723": "h", "7724": "I", "7725": "i", "7728": "K", "7729": "k", "7730": "K", "7731": "k", "7732": "K", "7733": "k", "7734": "L", "7735": "l", "7738": "L", "7739": "l", "7740": "L", "7741": "l", "7742": "M", "7743": "m", "7744": "M", "7745": "m", "7746": "M", "7747": "m", "7748": "N", "7749": "n", "7750": "N", "7751": "n", "7752": "N", "7753": "n", "7754": "N", "7755": "n", "7764": "P", "7765": "p", "7766": "P", "7767": "p", "7768": "R", "7769": "r", "7770": "R", "7771": "r", "7774": "R", "7775": "r", "7776": "S", "7777": "s", "7778": "S", "7779": "s", "7786": "T", "7787": "t", "7788": "T", "7789": "t", "7790": "T", "7791": "t", "7792": "T", "7793": "t", "7794": "U", "7795": "u", "7796": "U", "7797": "u", "7798": "U", "7799": "u", "7804": "V", "7805": "v", "7806": "V", "7807": "v", "7808": "W", "7809": "w", "7810": "W", "7811": "w", "7812": "W", "7813": "w", "7814": "W", "7815": "w", "7816": "W", "7817": "w", "7818": "X", "7819": "x", "7820": "X", "7821": "x", "7822": "Y", "7823": "y", "7824": "Z", "7825": "z", "7826": "Z", "7827": "z", "7828": "Z", "7829": "z", "7835": "s", "7840": "A", "7841": "a", "7842": "A", "7843": "a", "7864": "E", "7865": "e", "7866": "E", "7867": "e", "7868": "E", "7869": "e", "7880": "I", "7881": "i", "7882": "I", "7883": "i", "7884": "O", "7885": "o", "7886": "O", "7887": "o", "7908": "U", "7909": "u", "7910": "U", "7911": "u", "7922": "Y", "7923": "y", "7924": "Y", "7925": "y", "7926": "Y", "7927": "y", "7928": "Y", "7929": "y", "8305": "i", "8341": "h", "8342": "k", "8343": "l", "8344": "m", "8345": "n", "8346": "p", "8347": "s", "8348": "t", "8450": "c", "8458": "g", "8459": "h", "8460": "h", "8461": "h", "8464": "i", "8465": "i", "8466": "l", "8467": "l", "8468": "l", "8469": "n", "8472": "p", "8473": "p", "8474": "q", "8475": "r", "8476": "r", "8477": "r", "8484": "z", "8488": "z", "8492": "b", "8493": "c", "8495": "e", "8496": "e", "8497": "f", "8498": "F", "8499": "m", "8500": "o", "8506": "q", "8513": "g", "8514": "l", "8515": "l", "8516": "y", "8517": "d", "8518": "d", "8519": "e", "8520": "i", "8521": "j", "8526": "f", "8579": "C", "8580": "c", "8765": "s", "8766": "s", "8959": "z", "8999": "x", "9746": "x", "9776": "i", "9866": "i", "10005": "x", "10006": "x", "10007": "x", "10008": "x", "10625": "z", "10626": "z", "11362": "L", "11364": "R", "11365": "a", "11366": "t", "11373": "A", "11374": "M", "11375": "A", "11390": "S", "11391": "Z", "19904": "i", "42893": "H", "42922": "H", "42923": "E", "42924": "G", "42925": "L", "42928": "K", "42929": "T", "62937": "x" };
  }
});

// node_modules/normalize-strings/index.js
var require_normalize_strings = __commonJS({
  "node_modules/normalize-strings/index.js"(exports, module2) {
    (function(global, factory) {
      if (typeof define === "function" && define.amd) {
        define(function() {
          return factory(global, global.document);
        });
      } else if (typeof module2 !== "undefined" && module2.exports) {
        module2.exports = factory(global, global.document);
      } else {
        global.normalize = factory(global, global.document);
      }
    })(typeof window !== "undefined" ? window : exports, function(window2, document2) {
      var charmap = require_charmap();
      var regex = null;
      var current_charmap;
      var old_charmap;
      function normalize2(str, custom_charmap) {
        old_charmap = current_charmap;
        current_charmap = custom_charmap || charmap;
        regex = regex && old_charmap === current_charmap ? regex : buildRegExp(current_charmap);
        return str.replace(regex, function(charToReplace) {
          return current_charmap[charToReplace.charCodeAt(0)] || charToReplace;
        });
      }
      function buildRegExp(charmap2) {
        return new RegExp("[" + Object.keys(charmap2).map(function(code) {
          return String.fromCharCode(code);
        }).join(" ") + "]", "g");
      }
      return normalize2;
    });
  }
});

// node_modules/text-readability/node_modules/syllable/problematic.json
var require_problematic = __commonJS({
  "node_modules/text-readability/node_modules/syllable/problematic.json"(exports, module2) {
    module2.exports = {
      abalone: 4,
      abare: 3,
      abbruzzese: 4,
      abed: 2,
      aborigine: 5,
      abruzzese: 4,
      acreage: 3,
      adame: 3,
      adieu: 2,
      adobe: 3,
      anemone: 4,
      apache: 3,
      aphrodite: 4,
      apostrophe: 4,
      ariadne: 4,
      cafe: 2,
      calliope: 4,
      catastrophe: 4,
      chile: 2,
      chloe: 2,
      circe: 2,
      coyote: 3,
      daphne: 2,
      epitome: 4,
      eurydice: 4,
      euterpe: 3,
      every: 2,
      everywhere: 3,
      forever: 3,
      gethsemane: 4,
      guacamole: 4,
      hermione: 4,
      hyperbole: 4,
      jesse: 2,
      jukebox: 2,
      karate: 3,
      machete: 3,
      maybe: 2,
      newlywed: 3,
      penelope: 4,
      people: 2,
      persephone: 4,
      phoebe: 2,
      pulse: 1,
      queue: 1,
      recipe: 3,
      riverbed: 3,
      sesame: 3,
      shoreline: 2,
      simile: 3,
      snuffleupagus: 5,
      sometimes: 2,
      syncope: 3,
      tamale: 3,
      waterbed: 3,
      wednesday: 2,
      yosemite: 4,
      zoe: 2
    };
  }
});

// node_modules/text-readability/node_modules/syllable/index.js
var require_syllable = __commonJS({
  "node_modules/text-readability/node_modules/syllable/index.js"(exports, module2) {
    "use strict";
    var pluralize2 = require_pluralize();
    var normalize2 = require_normalize_strings();
    var problematic2 = require_problematic();
    module2.exports = syllables;
    var own2 = {}.hasOwnProperty;
    var EXPRESSION_MONOSYLLABIC_ONE2 = new RegExp(
      [
        "cia(?:l|$)",
        "tia",
        "cius",
        "cious",
        "[^aeiou]giu",
        "[aeiouy][^aeiouy]ion",
        "iou",
        "sia$",
        "eous$",
        "[oa]gue$",
        ".[^aeiuoycgltdb]{2,}ed$",
        ".ely$",
        "^jua",
        "uai",
        "eau",
        "^busi$",
        "(?:[aeiouy](?:" + [
          "[bcfgklmnprsvwxyz]",
          "ch",
          "dg",
          "g[hn]",
          "lch",
          "l[lv]",
          "mm",
          "nch",
          "n[cgn]",
          "r[bcnsv]",
          "squ",
          "s[chkls]",
          "th"
        ].join("|") + ")ed$)",
        "(?:[aeiouy](?:" + [
          "[bdfklmnprstvy]",
          "ch",
          "g[hn]",
          "lch",
          "l[lv]",
          "mm",
          "nch",
          "nn",
          "r[nsv]",
          "squ",
          "s[cklst]",
          "th"
        ].join("|") + ")es$)"
      ].join("|"),
      "g"
    );
    var EXPRESSION_MONOSYLLABIC_TWO2 = new RegExp(
      "[aeiouy](?:" + [
        "[bcdfgklmnprstvyz]",
        "ch",
        "dg",
        "g[hn]",
        "l[lv]",
        "mm",
        "n[cgn]",
        "r[cnsv]",
        "squ",
        "s[cklst]",
        "th"
      ].join("|") + ")e$",
      "g"
    );
    var EXPRESSION_DOUBLE_SYLLABIC_ONE2 = new RegExp(
      "(?:" + [
        "([^aeiouy])\\1l",
        "[^aeiouy]ie(?:r|s?t)",
        "[aeiouym]bl",
        "eo",
        "ism",
        "asm",
        "thm",
        "dnt",
        "snt",
        "uity",
        "dea",
        "gean",
        "oa",
        "ua",
        "react?",
        "orbed",
        // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`
        "eings?",
        "[aeiouy]sh?e[rs]"
      ].join("|") + ")$",
      "g"
    );
    var EXPRESSION_DOUBLE_SYLLABIC_TWO2 = new RegExp(
      [
        "creat(?!u)",
        "[^gq]ua[^auieo]",
        "[aeiou]{3}",
        "^(?:ia|mc|coa[dglx].)",
        "^re(app|es|im|us)"
      ].join("|"),
      "g"
    );
    var EXPRESSION_DOUBLE_SYLLABIC_THREE2 = new RegExp(
      [
        "[^aeiou]y[ae]",
        "[^l]lien",
        "riet",
        "dien",
        "iu",
        "io",
        "ii",
        "uen",
        "real",
        "iell",
        "eo[^aeiou]",
        "[aeiou]y[aeiou]"
      ].join("|"),
      "g"
    );
    var EXPRESSION_DOUBLE_SYLLABIC_FOUR2 = /[^s]ia/;
    var EXPRESSION_SINGLE2 = new RegExp(
      [
        "^(?:" + [
          "un",
          "fore",
          "ware",
          "none?",
          "out",
          "post",
          "sub",
          "pre",
          "pro",
          "dis",
          "side",
          "some"
        ].join("|") + ")",
        "(?:" + [
          "ly",
          "less",
          "some",
          "ful",
          "ers?",
          "ness",
          "cians?",
          "ments?",
          "ettes?",
          "villes?",
          "ships?",
          "sides?",
          "ports?",
          "shires?",
          "tion(?:ed|s)?"
        ].join("|") + ")$"
      ].join("|"),
      "g"
    );
    var EXPRESSION_DOUBLE2 = new RegExp(
      [
        "^(?:" + [
          "above",
          "anti",
          "ante",
          "counter",
          "hyper",
          "afore",
          "agri",
          "infra",
          "intra",
          "inter",
          "over",
          "semi",
          "ultra",
          "under",
          "extra",
          "dia",
          "micro",
          "mega",
          "kilo",
          "pico",
          "nano",
          "macro",
          "somer"
        ].join("|") + ")",
        "(?:" + ["fully", "berry", "woman", "women", "edly"].join("|") + ")$"
      ].join("|"),
      "g"
    );
    var EXPRESSION_TRIPLE2 = /(creations?|ology|ologist|onomy|onomist)$/g;
    var SPLIT = /\b/g;
    var APOSTROPHE = /['’]/g;
    var EXPRESSION_NONALPHABETIC = /[^a-z]/g;
    function syllables(value) {
      var values = normalize2(String(value)).toLowerCase().replace(APOSTROPHE, "").split(SPLIT);
      var length = values.length;
      var index = -1;
      var total = 0;
      while (++index < length) {
        total += syllable2(values[index].replace(EXPRESSION_NONALPHABETIC, ""));
      }
      return total;
    }
    function syllable2(value) {
      var count = 0;
      var index;
      var length;
      var singular;
      var parts;
      var addOne;
      var subtractOne;
      if (value.length === 0) {
        return count;
      }
      if (value.length < 3) {
        return 1;
      }
      if (own2.call(problematic2, value)) {
        return problematic2[value];
      }
      singular = pluralize2(value, 1);
      if (own2.call(problematic2, singular)) {
        return problematic2[singular];
      }
      addOne = returnFactory(1);
      subtractOne = returnFactory(-1);
      value = value.replace(EXPRESSION_TRIPLE2, countFactory(3)).replace(EXPRESSION_DOUBLE2, countFactory(2)).replace(EXPRESSION_SINGLE2, countFactory(1));
      parts = value.split(/[^aeiouy]+/);
      index = -1;
      length = parts.length;
      while (++index < length) {
        if (parts[index] !== "") {
          count++;
        }
      }
      value.replace(EXPRESSION_MONOSYLLABIC_ONE2, subtractOne).replace(EXPRESSION_MONOSYLLABIC_TWO2, subtractOne);
      value.replace(EXPRESSION_DOUBLE_SYLLABIC_ONE2, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_TWO2, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_THREE2, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR2, addOne);
      return count || 1;
      function countFactory(addition) {
        return counter;
        function counter() {
          count += addition;
          return "";
        }
      }
      function returnFactory(addition) {
        return returner;
        function returner($0) {
          count += addition;
          return $0;
        }
      }
    }
  }
});

// node_modules/pluralize/pluralize.js
var require_pluralize2 = __commonJS({
  "node_modules/pluralize/pluralize.js"(exports, module2) {
    (function(root, pluralize2) {
      if (typeof require === "function" && typeof exports === "object" && typeof module2 === "object") {
        module2.exports = pluralize2();
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return pluralize2();
        });
      } else {
        root.pluralize = pluralize2();
      }
    })(exports, function() {
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};
      function sanitizeRule(rule) {
        if (typeof rule === "string") {
          return new RegExp("^" + rule + "$", "i");
        }
        return rule;
      }
      function restoreCase(word, token) {
        if (word === token)
          return token;
        if (word === word.toLowerCase())
          return token.toLowerCase();
        if (word === word.toUpperCase())
          return token.toUpperCase();
        if (word[0] === word[0].toUpperCase()) {
          return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
        }
        return token.toLowerCase();
      }
      function interpolate(str, args) {
        return str.replace(/\$(\d{1,2})/g, function(match, index) {
          return args[index] || "";
        });
      }
      function replace(word, rule) {
        return word.replace(rule[0], function(match, index) {
          var result = interpolate(rule[1], arguments);
          if (match === "") {
            return restoreCase(word[index - 1], result);
          }
          return restoreCase(match, result);
        });
      }
      function sanitizeWord(token, word, rules) {
        if (!token.length || uncountables.hasOwnProperty(token)) {
          return word;
        }
        var len = rules.length;
        while (len--) {
          var rule = rules[len];
          if (rule[0].test(word))
            return replace(word, rule);
        }
        return word;
      }
      function replaceWord(replaceMap, keepMap, rules) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
          }
          if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
          }
          return sanitizeWord(token, word, rules);
        };
      }
      function checkWord(replaceMap, keepMap, rules, bool) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token))
            return true;
          if (replaceMap.hasOwnProperty(token))
            return false;
          return sanitizeWord(token, token, rules) === token;
        };
      }
      function pluralize2(word, count, inclusive) {
        var pluralized = count === 1 ? pluralize2.singular(word) : pluralize2.plural(word);
        return (inclusive ? count + " " : "") + pluralized;
      }
      pluralize2.plural = replaceWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.isPlural = checkWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.singular = replaceWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.isSingular = checkWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.addPluralRule = function(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addSingularRule = function(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addUncountableRule = function(word) {
        if (typeof word === "string") {
          uncountables[word.toLowerCase()] = true;
          return;
        }
        pluralize2.addPluralRule(word, "$0");
        pluralize2.addSingularRule(word, "$0");
      };
      pluralize2.addIrregularRule = function(single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();
        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };
      [
        // Pronouns.
        ["I", "we"],
        ["me", "us"],
        ["he", "they"],
        ["she", "they"],
        ["them", "them"],
        ["myself", "ourselves"],
        ["yourself", "yourselves"],
        ["itself", "themselves"],
        ["herself", "themselves"],
        ["himself", "themselves"],
        ["themself", "themselves"],
        ["is", "are"],
        ["was", "were"],
        ["has", "have"],
        ["this", "these"],
        ["that", "those"],
        // Words ending in with a consonant and `o`.
        ["echo", "echoes"],
        ["dingo", "dingoes"],
        ["volcano", "volcanoes"],
        ["tornado", "tornadoes"],
        ["torpedo", "torpedoes"],
        // Ends with `us`.
        ["genus", "genera"],
        ["viscus", "viscera"],
        // Ends with `ma`.
        ["stigma", "stigmata"],
        ["stoma", "stomata"],
        ["dogma", "dogmata"],
        ["lemma", "lemmata"],
        ["schema", "schemata"],
        ["anathema", "anathemata"],
        // Other irregular rules.
        ["ox", "oxen"],
        ["axe", "axes"],
        ["die", "dice"],
        ["yes", "yeses"],
        ["foot", "feet"],
        ["eave", "eaves"],
        ["goose", "geese"],
        ["tooth", "teeth"],
        ["quiz", "quizzes"],
        ["human", "humans"],
        ["proof", "proofs"],
        ["carve", "carves"],
        ["valve", "valves"],
        ["looey", "looies"],
        ["thief", "thieves"],
        ["groove", "grooves"],
        ["pickaxe", "pickaxes"],
        ["passerby", "passersby"]
      ].forEach(function(rule) {
        return pluralize2.addIrregularRule(rule[0], rule[1]);
      });
      [
        [/s?$/i, "s"],
        [/[^\u0000-\u007F]$/i, "$0"],
        [/([^aeiou]ese)$/i, "$1"],
        [/(ax|test)is$/i, "$1es"],
        [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, "$1es"],
        [/(e[mn]u)s?$/i, "$1s"],
        [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, "$1"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
        [/(seraph|cherub)(?:im)?$/i, "$1im"],
        [/(her|at|gr)o$/i, "$1oes"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
        [/sis$/i, "ses"],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
        [/([^aeiouy]|qu)y$/i, "$1ies"],
        [/([^ch][ieo][ln])ey$/i, "$1ies"],
        [/(x|ch|ss|sh|zz)$/i, "$1es"],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
        [/\b((?:tit)?m|l)(?:ice|ouse)$/i, "$1ice"],
        [/(pe)(?:rson|ople)$/i, "$1ople"],
        [/(child)(?:ren)?$/i, "$1ren"],
        [/eaux$/i, "$0"],
        [/m[ae]n$/i, "men"],
        ["thou", "you"]
      ].forEach(function(rule) {
        return pluralize2.addPluralRule(rule[0], rule[1]);
      });
      [
        [/s$/i, ""],
        [/(ss)$/i, "$1"],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
        [/ies$/i, "y"],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
        [/\b(mon|smil)ies$/i, "$1ey"],
        [/\b((?:tit)?m|l)ice$/i, "$1ouse"],
        [/(seraph|cherub)im$/i, "$1"],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, "$1"],
        [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, "$1sis"],
        [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
        [/(test)(?:is|es)$/i, "$1is"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
        [/(alumn|alg|vertebr)ae$/i, "$1a"],
        [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
        [/(matr|append)ices$/i, "$1ix"],
        [/(pe)(rson|ople)$/i, "$1rson"],
        [/(child)ren$/i, "$1"],
        [/(eau)x?$/i, "$1"],
        [/men$/i, "man"]
      ].forEach(function(rule) {
        return pluralize2.addSingularRule(rule[0], rule[1]);
      });
      [
        // Singular words with no plurals.
        "adulthood",
        "advice",
        "agenda",
        "aid",
        "aircraft",
        "alcohol",
        "ammo",
        "analytics",
        "anime",
        "athletics",
        "audio",
        "bison",
        "blood",
        "bream",
        "buffalo",
        "butter",
        "carp",
        "cash",
        "chassis",
        "chess",
        "clothing",
        "cod",
        "commerce",
        "cooperation",
        "corps",
        "debris",
        "diabetes",
        "digestion",
        "elk",
        "energy",
        "equipment",
        "excretion",
        "expertise",
        "firmware",
        "flounder",
        "fun",
        "gallows",
        "garbage",
        "graffiti",
        "hardware",
        "headquarters",
        "health",
        "herpes",
        "highjinks",
        "homework",
        "housework",
        "information",
        "jeans",
        "justice",
        "kudos",
        "labour",
        "literature",
        "machinery",
        "mackerel",
        "mail",
        "media",
        "mews",
        "moose",
        "music",
        "mud",
        "manga",
        "news",
        "only",
        "personnel",
        "pike",
        "plankton",
        "pliers",
        "police",
        "pollution",
        "premises",
        "rain",
        "research",
        "rice",
        "salmon",
        "scissors",
        "series",
        "sewage",
        "shambles",
        "shrimp",
        "software",
        "species",
        "staff",
        "swine",
        "tennis",
        "traffic",
        "transportation",
        "trout",
        "tuna",
        "wealth",
        "welfare",
        "whiting",
        "wildebeest",
        "wildlife",
        "you",
        /pok[eé]mon$/i,
        // Regexes.
        /[^aeiou]ese$/i,
        // "chinese", "japanese"
        /deer$/i,
        // "deer", "reindeer"
        /fish$/i,
        // "fish", "blowfish", "angelfish"
        /measles$/i,
        /o[iu]s$/i,
        // "carnivorous"
        /pox$/i,
        // "chickpox", "smallpox"
        /sheep$/i
      ].forEach(pluralize2.addUncountableRule);
      return pluralize2;
    });
  }
});

// node_modules/text-readability/easy_words.js
var require_easy_words = __commonJS({
  "node_modules/text-readability/easy_words.js"(exports, module2) {
    var easyWords = [
      "a",
      "able",
      "aboard",
      "about",
      "above",
      "absent",
      "accept",
      "accident",
      "account",
      "ache",
      "aching",
      "acorn",
      "acre",
      "across",
      "act",
      "acts",
      "add",
      "address",
      "admire",
      "adventure",
      "afar",
      "afraid",
      "after",
      "afternoon",
      "afterward",
      "afterwards",
      "again",
      "against",
      "age",
      "aged",
      "ago",
      "agree",
      "ah",
      "ahead",
      "aid",
      "aim",
      "air",
      "airfield",
      "airplane",
      "airport",
      "airship",
      "airy",
      "alarm",
      "alike",
      "alive",
      "all",
      "alley",
      "alligator",
      "allow",
      "almost",
      "alone",
      "along",
      "aloud",
      "already",
      "also",
      "always",
      "am",
      "america",
      "american",
      "among",
      "amount",
      "an",
      "and",
      "angel",
      "anger",
      "angry",
      "animal",
      "another",
      "answer",
      "ant",
      "any",
      "anybody",
      "anyhow",
      "anyone",
      "anything",
      "anyway",
      "anywhere",
      "apart",
      "apartment",
      "ape",
      "apiece",
      "appear",
      "apple",
      "april",
      "apron",
      "are",
      "aren't",
      "arise",
      "arithmetic",
      "arm",
      "armful",
      "army",
      "arose",
      "around",
      "arrange",
      "arrive",
      "arrived",
      "arrow",
      "art",
      "artist",
      "as",
      "ash",
      "ashes",
      "aside",
      "ask",
      "asleep",
      "at",
      "ate",
      "attack",
      "attend",
      "attention",
      "august",
      "aunt",
      "author",
      "auto",
      "automobile",
      "autumn",
      "avenue",
      "awake",
      "awaken",
      "away",
      "awful",
      "awfully",
      "awhile",
      "ax",
      "axe",
      "baa",
      "babe",
      "babies",
      "back",
      "background",
      "backward",
      "backwards",
      "bacon",
      "bad",
      "badge",
      "badly",
      "bag",
      "bake",
      "baker",
      "bakery",
      "baking",
      "ball",
      "balloon",
      "banana",
      "band",
      "bandage",
      "bang",
      "banjo",
      "bank",
      "banker",
      "bar",
      "barber",
      "bare",
      "barefoot",
      "barely",
      "bark",
      "barn",
      "barrel",
      "base",
      "baseball",
      "basement",
      "basket",
      "bat",
      "batch",
      "bath",
      "bathe",
      "bathing",
      "bathroom",
      "bathtub",
      "battle",
      "battleship",
      "bay",
      "be",
      "beach",
      "bead",
      "beam",
      "bean",
      "bear",
      "beard",
      "beast",
      "beat",
      "beating",
      "beautiful",
      "beautify",
      "beauty",
      "became",
      "because",
      "become",
      "becoming",
      "bed",
      "bedbug",
      "bedroom",
      "bedspread",
      "bedtime",
      "bee",
      "beech",
      "beef",
      "beefsteak",
      "beehive",
      "been",
      "beer",
      "beet",
      "before",
      "beg",
      "began",
      "beggar",
      "begged",
      "begin",
      "beginning",
      "begun",
      "behave",
      "behind",
      "being",
      "believe",
      "bell",
      "belong",
      "below",
      "belt",
      "bench",
      "bend",
      "beneath",
      "bent",
      "berries",
      "berry",
      "beside",
      "besides",
      "best",
      "bet",
      "better",
      "between",
      "bib",
      "bible",
      "bicycle",
      "bid",
      "big",
      "bigger",
      "bill",
      "billboard",
      "bin",
      "bind",
      "bird",
      "birth",
      "birthday",
      "biscuit",
      "bit",
      "bite",
      "biting",
      "bitter",
      "black",
      "blackberry",
      "blackbird",
      "blackboard",
      "blackness",
      "blacksmith",
      "blame",
      "blank",
      "blanket",
      "blast",
      "blaze",
      "bleed",
      "bless",
      "blessing",
      "blew",
      "blind",
      "blindfold",
      "blinds",
      "block",
      "blood",
      "bloom",
      "blossom",
      "blot",
      "blow",
      "blue",
      "blueberry",
      "bluebird",
      "blush",
      "board",
      "boast",
      "boat",
      "bob",
      "bobwhite",
      "bodies",
      "body",
      "boil",
      "boiler",
      "bold",
      "bone",
      "bonnet",
      "boo",
      "book",
      "bookcase",
      "bookkeeper",
      "boom",
      "boot",
      "born",
      "borrow",
      "boss",
      "both",
      "bother",
      "bottle",
      "bottom",
      "bought",
      "bounce",
      "bow",
      "bowl",
      "bow-wow",
      "box",
      "boxcar",
      "boxer",
      "boxes",
      "boy",
      "boyhood",
      "bracelet",
      "brain",
      "brake",
      "bran",
      "branch",
      "brass",
      "brave",
      "bread",
      "break",
      "breakfast",
      "breast",
      "breath",
      "breathe",
      "breeze",
      "brick",
      "bride",
      "bridge",
      "bright",
      "brightness",
      "bring",
      "broad",
      "broadcast",
      "broke",
      "broken",
      "brook",
      "broom",
      "brother",
      "brought",
      "brown",
      "brush",
      "bubble",
      "bucket",
      "buckle",
      "bud",
      "buffalo",
      "bug",
      "buggy",
      "build",
      "building",
      "built",
      "bulb",
      "bull",
      "bullet",
      "bum",
      "bumblebee",
      "bump",
      "bun",
      "bunch",
      "bundle",
      "bunny",
      "burn",
      "burst",
      "bury",
      "bus",
      "bush",
      "bushel",
      "business",
      "busy",
      "but",
      "butcher",
      "butt",
      "butter",
      "buttercup",
      "butterfly",
      "buttermilk",
      "butterscotch",
      "button",
      "buttonhole",
      "buy",
      "buzz",
      "by",
      "bye",
      "cab",
      "cabbage",
      "cabin",
      "cabinet",
      "cackle",
      "cage",
      "cake",
      "calendar",
      "calf",
      "call",
      "caller",
      "calling",
      "came",
      "camel",
      "camp",
      "campfire",
      "can",
      "canal",
      "canary",
      "candle",
      "candlestick",
      "candy",
      "cane",
      "cannon",
      "cannot",
      "canoe",
      "can't",
      "canyon",
      "cap",
      "cape",
      "capital",
      "captain",
      "car",
      "card",
      "cardboard",
      "care",
      "careful",
      "careless",
      "carelessness",
      "carload",
      "carpenter",
      "carpet",
      "carriage",
      "carrot",
      "carry",
      "cart",
      "carve",
      "case",
      "cash",
      "cashier",
      "castle",
      "cat",
      "catbird",
      "catch",
      "catcher",
      "caterpillar",
      "catfish",
      "catsup",
      "cattle",
      "caught",
      "cause",
      "cave",
      "ceiling",
      "cell",
      "cellar",
      "cent",
      "center",
      "cereal",
      "certain",
      "certainly",
      "chain",
      "chair",
      "chalk",
      "champion",
      "chance",
      "change",
      "chap",
      "charge",
      "charm",
      "chart",
      "chase",
      "chatter",
      "cheap",
      "cheat",
      "check",
      "checkers",
      "cheek",
      "cheer",
      "cheese",
      "cherry",
      "chest",
      "chew",
      "chick",
      "chicken",
      "chief",
      "child",
      "childhood",
      "children",
      "chill",
      "chilly",
      "chimney",
      "chin",
      "china",
      "chip",
      "chipmunk",
      "chocolate",
      "choice",
      "choose",
      "chop",
      "chorus",
      "chose",
      "chosen",
      "christen",
      "christmas",
      "church",
      "churn",
      "cigarette",
      "circle",
      "circus",
      "citizen",
      "city",
      "clang",
      "clap",
      "class",
      "classmate",
      "classroom",
      "claw",
      "clay",
      "clean",
      "cleaner",
      "clear",
      "clerk",
      "clever",
      "click",
      "cliff",
      "climb",
      "clip",
      "cloak",
      "clock",
      "close",
      "closet",
      "cloth",
      "clothes",
      "clothing",
      "cloud",
      "cloudy",
      "clover",
      "clown",
      "club",
      "cluck",
      "clump",
      "coach",
      "coal",
      "coast",
      "coat",
      "cob",
      "cobbler",
      "cocoa",
      "coconut",
      "cocoon",
      "cod",
      "codfish",
      "coffee",
      "coffeepot",
      "coin",
      "cold",
      "collar",
      "college",
      "color",
      "colored",
      "colt",
      "column",
      "comb",
      "come",
      "comfort",
      "comic",
      "coming",
      "company",
      "compare",
      "conductor",
      "cone",
      "connect",
      "coo",
      "cook",
      "cooked",
      "cooking",
      "cookie",
      "cookies",
      "cool",
      "cooler",
      "coop",
      "copper",
      "copy",
      "cord",
      "cork",
      "corn",
      "corner",
      "correct",
      "cost",
      "cot",
      "cottage",
      "cotton",
      "couch",
      "cough",
      "could",
      "couldn't",
      "count",
      "counter",
      "country",
      "county",
      "course",
      "court",
      "cousin",
      "cover",
      "cow",
      "coward",
      "cowardly",
      "cowboy",
      "cozy",
      "crab",
      "crack",
      "cracker",
      "cradle",
      "cramps",
      "cranberry",
      "crank",
      "cranky",
      "crash",
      "crawl",
      "crazy",
      "cream",
      "creamy",
      "creek",
      "creep",
      "crept",
      "cried",
      "croak",
      "crook",
      "crooked",
      "crop",
      "cross",
      "crossing",
      "cross-eyed",
      "crow",
      "crowd",
      "crowded",
      "crown",
      "cruel",
      "crumb",
      "crumble",
      "crush",
      "crust",
      "cry",
      "cries",
      "cub",
      "cuff",
      "cup",
      "cuff",
      "cup",
      "cupboard",
      "cupful",
      "cure",
      "curl",
      "curly",
      "curtain",
      "curve",
      "cushion",
      "custard",
      "customer",
      "cut",
      "cute",
      "cutting",
      "dab",
      "dad",
      "daddy",
      "daily",
      "dairy",
      "daisy",
      "dam",
      "damage",
      "dame",
      "damp",
      "dance",
      "dancer",
      "dancing",
      "dandy",
      "danger",
      "dangerous",
      "dare",
      "dark",
      "darkness",
      "darling",
      "darn",
      "dart",
      "dash",
      "date",
      "daughter",
      "dawn",
      "day",
      "daybreak",
      "daytime",
      "dead",
      "deaf",
      "deal",
      "dear",
      "death",
      "december",
      "decide",
      "deck",
      "deed",
      "deep",
      "deer",
      "defeat",
      "defend",
      "defense",
      "delight",
      "den",
      "dentist",
      "depend",
      "deposit",
      "describe",
      "desert",
      "deserve",
      "desire",
      "desk",
      "destroy",
      "devil",
      "dew",
      "diamond",
      "did",
      "didn't",
      "die",
      "died",
      "dies",
      "difference",
      "different",
      "dig",
      "dim",
      "dime",
      "dine",
      "ding-dong",
      "dinner",
      "dip",
      "direct",
      "direction",
      "dirt",
      "dirty",
      "discover",
      "dish",
      "dislike",
      "dismiss",
      "ditch",
      "dive",
      "diver",
      "divide",
      "do",
      "dock",
      "doctor",
      "does",
      "doesn't",
      "dog",
      "doll",
      "dollar",
      "dolly",
      "done",
      "donkey",
      "don't",
      "door",
      "doorbell",
      "doorknob",
      "doorstep",
      "dope",
      "dot",
      "double",
      "dough",
      "dove",
      "down",
      "downstairs",
      "downtown",
      "dozen",
      "drag",
      "drain",
      "drank",
      "draw",
      "drawer",
      "draw",
      "drawing",
      "dream",
      "dress",
      "dresser",
      "dressmaker",
      "drew",
      "dried",
      "drift",
      "drill",
      "drink",
      "drip",
      "drive",
      "driven",
      "driver",
      "drop",
      "drove",
      "drown",
      "drowsy",
      "drub",
      "drum",
      "drunk",
      "dry",
      "duck",
      "due",
      "dug",
      "dull",
      "dumb",
      "dump",
      "during",
      "dust",
      "dusty",
      "duty",
      "dwarf",
      "dwell",
      "dwelt",
      "dying",
      "each",
      "eager",
      "eagle",
      "ear",
      "early",
      "earn",
      "earth",
      "east",
      "eastern",
      "easy",
      "eat",
      "eaten",
      "edge",
      "egg",
      "eh",
      "eight",
      "eighteen",
      "eighth",
      "eighty",
      "either",
      "elbow",
      "elder",
      "eldest",
      "electric",
      "electricity",
      "elephant",
      "eleven",
      "elf",
      "elm",
      "else",
      "elsewhere",
      "empty",
      "end",
      "ending",
      "enemy",
      "engine",
      "engineer",
      "english",
      "enjoy",
      "enough",
      "enter",
      "envelope",
      "equal",
      "erase",
      "eraser",
      "errand",
      "escape",
      "eve",
      "even",
      "evening",
      "ever",
      "every",
      "everybody",
      "everyday",
      "everyone",
      "everything",
      "everywhere",
      "evil",
      "exact",
      "except",
      "exchange",
      "excited",
      "exciting",
      "excuse",
      "exit",
      "expect",
      "explain",
      "extra",
      "eye",
      "eyebrow",
      "fable",
      "face",
      "facing",
      "fact",
      "factory",
      "fail",
      "faint",
      "fair",
      "fairy",
      "faith",
      "fake",
      "fall",
      "false",
      "family",
      "fan",
      "fancy",
      "far",
      "faraway",
      "fare",
      "farmer",
      "farm",
      "farming",
      "far-off",
      "farther",
      "fashion",
      "fast",
      "fasten",
      "fat",
      "father",
      "fault",
      "favor",
      "favorite",
      "fear",
      "feast",
      "feather",
      "february",
      "fed",
      "feed",
      "feel",
      "feet",
      "fell",
      "fellow",
      "felt",
      "fence",
      "fever",
      "few",
      "fib",
      "fiddle",
      "field",
      "fife",
      "fifteen",
      "fifth",
      "fifty",
      "fig",
      "fight",
      "figure",
      "file",
      "fill",
      "film",
      "finally",
      "find",
      "fine",
      "finger",
      "finish",
      "fire",
      "firearm",
      "firecracker",
      "fireplace",
      "fireworks",
      "firing",
      "first",
      "fish",
      "fisherman",
      "fist",
      "fit",
      "fits",
      "five",
      "fix",
      "flag",
      "flake",
      "flame",
      "flap",
      "flash",
      "flashlight",
      "flat",
      "flea",
      "flesh",
      "flew",
      "flies",
      "flight",
      "flip",
      "flip-flop",
      "float",
      "flock",
      "flood",
      "floor",
      "flop",
      "flour",
      "flow",
      "flower",
      "flowery",
      "flutter",
      "fly",
      "foam",
      "fog",
      "foggy",
      "fold",
      "folks",
      "follow",
      "following",
      "fond",
      "food",
      "fool",
      "foolish",
      "foot",
      "football",
      "footprint",
      "for",
      "forehead",
      "forest",
      "forget",
      "forgive",
      "forgot",
      "forgotten",
      "fork",
      "form",
      "fort",
      "forth",
      "fortune",
      "forty",
      "forward",
      "fought",
      "found",
      "fountain",
      "four",
      "fourteen",
      "fourth",
      "fox",
      "frame",
      "free",
      "freedom",
      "freeze",
      "freight",
      "french",
      "fresh",
      "fret",
      "friday",
      "fried",
      "friend",
      "friendly",
      "friendship",
      "frighten",
      "frog",
      "from",
      "front",
      "frost",
      "frown",
      "froze",
      "fruit",
      "fry",
      "fudge",
      "fuel",
      "full",
      "fully",
      "fun",
      "funny",
      "fur",
      "furniture",
      "further",
      "fuzzy",
      "gain",
      "gallon",
      "gallop",
      "game",
      "gang",
      "garage",
      "garbage",
      "garden",
      "gas",
      "gasoline",
      "gate",
      "gather",
      "gave",
      "gay",
      "gear",
      "geese",
      "general",
      "gentle",
      "gentleman",
      "gentlemen",
      "geography",
      "get",
      "getting",
      "giant",
      "gift",
      "gingerbread",
      "girl",
      "give",
      "given",
      "giving",
      "glad",
      "gladly",
      "glance",
      "glass",
      "glasses",
      "gleam",
      "glide",
      "glory",
      "glove",
      "glow",
      "glue",
      "go",
      "going",
      "goes",
      "goal",
      "goat",
      "gobble",
      "god",
      "god",
      "godmother",
      "gold",
      "golden",
      "goldfish",
      "golf",
      "gone",
      "good",
      "goods",
      "goodbye",
      "good-by",
      "goodbye",
      "good-bye",
      "good-looking",
      "goodness",
      "goody",
      "goose",
      "gooseberry",
      "got",
      "govern",
      "government",
      "gown",
      "grab",
      "gracious",
      "grade",
      "grain",
      "grand",
      "grandchild",
      "grandchildren",
      "granddaughter",
      "grandfather",
      "grandma",
      "grandmother",
      "grandpa",
      "grandson",
      "grandstand",
      "grape",
      "grapes",
      "grapefruit",
      "grass",
      "grasshopper",
      "grateful",
      "grave",
      "gravel",
      "graveyard",
      "gravy",
      "gray",
      "graze",
      "grease",
      "great",
      "green",
      "greet",
      "grew",
      "grind",
      "groan",
      "grocery",
      "ground",
      "group",
      "grove",
      "grow",
      "guard",
      "guess",
      "guest",
      "guide",
      "gulf",
      "gum",
      "gun",
      "gunpowder",
      "guy",
      "ha",
      "habit",
      "had",
      "hadn't",
      "hail",
      "hair",
      "haircut",
      "hairpin",
      "half",
      "hall",
      "halt",
      "ham",
      "hammer",
      "hand",
      "handful",
      "handkerchief",
      "handle",
      "handwriting",
      "hang",
      "happen",
      "happily",
      "happiness",
      "happy",
      "harbor",
      "hard",
      "hardly",
      "hardship",
      "hardware",
      "hare",
      "hark",
      "harm",
      "harness",
      "harp",
      "harvest",
      "has",
      "hasn't",
      "haste",
      "hasten",
      "hasty",
      "hat",
      "hatch",
      "hatchet",
      "hate",
      "haul",
      "have",
      "haven't",
      "having",
      "hawk",
      "hay",
      "hayfield",
      "haystack",
      "he",
      "head",
      "headache",
      "heal",
      "health",
      "healthy",
      "heap",
      "hear",
      "hearing",
      "heard",
      "heart",
      "heat",
      "heater",
      "heaven",
      "heavy",
      "he'd",
      "heel",
      "height",
      "held",
      "hell",
      "he'll",
      "hello",
      "helmet",
      "help",
      "helper",
      "helpful",
      "hem",
      "hen",
      "henhouse",
      "her",
      "hers",
      "herd",
      "here",
      "here's",
      "hero",
      "herself",
      "he's",
      "hey",
      "hickory",
      "hid",
      "hidden",
      "hide",
      "high",
      "highway",
      "hill",
      "hillside",
      "hilltop",
      "hilly",
      "him",
      "himself",
      "hind",
      "hint",
      "hip",
      "hire",
      "his",
      "hiss",
      "history",
      "hit",
      "hitch",
      "hive",
      "ho",
      "hoe",
      "hog",
      "hold",
      "holder",
      "hole",
      "holiday",
      "hollow",
      "holy",
      "home",
      "homely",
      "homesick",
      "honest",
      "honey",
      "honeybee",
      "honeymoon",
      "honk",
      "honor",
      "hood",
      "hoof",
      "hook",
      "hoop",
      "hop",
      "hope",
      "hopeful",
      "hopeless",
      "horn",
      "horse",
      "horseback",
      "horseshoe",
      "hose",
      "hospital",
      "host",
      "hot",
      "hotel",
      "hound",
      "hour",
      "house",
      "housetop",
      "housewife",
      "housework",
      "how",
      "however",
      "howl",
      "hug",
      "huge",
      "hum",
      "humble",
      "hump",
      "hundred",
      "hung",
      "hunger",
      "hungry",
      "hunk",
      "hunt",
      "hunter",
      "hurrah",
      "hurried",
      "hurry",
      "hurt",
      "husband",
      "hush",
      "hut",
      "hymn",
      "i",
      "ice",
      "icy",
      "i'd",
      "idea",
      "ideal",
      "if",
      "ill",
      "i'll",
      "i'm",
      "important",
      "impossible",
      "improve",
      "in",
      "inch",
      "inches",
      "income",
      "indeed",
      "indian",
      "indoors",
      "ink",
      "inn",
      "insect",
      "inside",
      "instant",
      "instead",
      "insult",
      "intend",
      "interested",
      "interesting",
      "into",
      "invite",
      "iron",
      "is",
      "island",
      "isn't",
      "it",
      "its",
      "it's",
      "itself",
      "i've",
      "ivory",
      "ivy",
      "jacket",
      "jacks",
      "jail",
      "jam",
      "january",
      "jar",
      "jaw",
      "jay",
      "jelly",
      "jellyfish",
      "jerk",
      "jig",
      "job",
      "jockey",
      "join",
      "joke",
      "joking",
      "jolly",
      "journey",
      "joy",
      "joyful",
      "joyous",
      "judge",
      "jug",
      "juice",
      "juicy",
      "july",
      "jump",
      "june",
      "junior",
      "junk",
      "just",
      "keen",
      "keep",
      "kept",
      "kettle",
      "key",
      "kick",
      "kid",
      "kill",
      "killed",
      "kind",
      "kindly",
      "kindness",
      "king",
      "kingdom",
      "kiss",
      "kitchen",
      "kite",
      "kitten",
      "kitty",
      "knee",
      "kneel",
      "knew",
      "knife",
      "knit",
      "knives",
      "knob",
      "knock",
      "knot",
      "know",
      "known",
      "lace",
      "lad",
      "ladder",
      "ladies",
      "lady",
      "laid",
      "lake",
      "lamb",
      "lame",
      "lamp",
      "land",
      "lane",
      "language",
      "lantern",
      "lap",
      "lard",
      "large",
      "lash",
      "lass",
      "last",
      "late",
      "laugh",
      "laundry",
      "law",
      "lawn",
      "lawyer",
      "lay",
      "lazy",
      "lead",
      "leader",
      "leaf",
      "leak",
      "lean",
      "leap",
      "learn",
      "learned",
      "least",
      "leather",
      "leave",
      "leaving",
      "led",
      "left",
      "leg",
      "lemon",
      "lemonade",
      "lend",
      "length",
      "less",
      "lesson",
      "let",
      "let's",
      "letter",
      "letting",
      "lettuce",
      "level",
      "liberty",
      "library",
      "lice",
      "lick",
      "lid",
      "lie",
      "life",
      "lift",
      "light",
      "lightness",
      "lightning",
      "like",
      "likely",
      "liking",
      "lily",
      "limb",
      "lime",
      "limp",
      "line",
      "linen",
      "lion",
      "lip",
      "list",
      "listen",
      "lit",
      "little",
      "live",
      "lives",
      "lively",
      "liver",
      "living",
      "lizard",
      "load",
      "loaf",
      "loan",
      "loaves",
      "lock",
      "locomotive",
      "log",
      "lone",
      "lonely",
      "lonesome",
      "long",
      "look",
      "lookout",
      "loop",
      "loose",
      "lord",
      "lose",
      "loser",
      "loss",
      "lost",
      "lot",
      "loud",
      "love",
      "lovely",
      "lover",
      "low",
      "luck",
      "lucky",
      "lumber",
      "lump",
      "lunch",
      "lying",
      "machine",
      "machinery",
      "mad",
      "made",
      "magazine",
      "magic",
      "maid",
      "mail",
      "mailbox",
      "mailman",
      "major",
      "make",
      "making",
      "male",
      "mama",
      "mamma",
      "man",
      "manager",
      "mane",
      "manger",
      "many",
      "map",
      "maple",
      "marble",
      "march",
      "march",
      "mare",
      "mark",
      "market",
      "marriage",
      "married",
      "marry",
      "mask",
      "mast",
      "master",
      "mat",
      "match",
      "matter",
      "mattress",
      "may",
      "may",
      "maybe",
      "mayor",
      "maypole",
      "me",
      "meadow",
      "meal",
      "mean",
      "means",
      "meant",
      "measure",
      "meat",
      "medicine",
      "meet",
      "meeting",
      "melt",
      "member",
      "men",
      "mend",
      "meow",
      "merry",
      "mess",
      "message",
      "met",
      "metal",
      "mew",
      "mice",
      "middle",
      "midnight",
      "might",
      "mighty",
      "mile",
      "milk",
      "milkman",
      "mill",
      "miler",
      "million",
      "mind",
      "mine",
      "miner",
      "mint",
      "minute",
      "mirror",
      "mischief",
      "miss",
      "miss",
      "misspell",
      "mistake",
      "misty",
      "mitt",
      "mitten",
      "mix",
      "moment",
      "monday",
      "money",
      "monkey",
      "month",
      "moo",
      "moon",
      "moonlight",
      "moose",
      "mop",
      "more",
      "morning",
      "morrow",
      "moss",
      "most",
      "mostly",
      "mother",
      "motor",
      "mount",
      "mountain",
      "mouse",
      "mouth",
      "move",
      "movie",
      "movies",
      "moving",
      "mow",
      "mr.",
      "mrs.",
      "much",
      "mud",
      "muddy",
      "mug",
      "mule",
      "multiply",
      "murder",
      "music",
      "must",
      "my",
      "myself",
      "nail",
      "name",
      "nap",
      "napkin",
      "narrow",
      "nasty",
      "naughty",
      "navy",
      "near",
      "nearby",
      "nearly",
      "neat",
      "neck",
      "necktie",
      "need",
      "needle",
      "needn't",
      "negro",
      "neighbor",
      "neighborhood",
      "neither",
      "nerve",
      "nest",
      "net",
      "never",
      "nevermore",
      "new",
      "news",
      "newspaper",
      "next",
      "nibble",
      "nice",
      "nickel",
      "night",
      "nightgown",
      "nine",
      "nineteen",
      "ninety",
      "no",
      "nobody",
      "nod",
      "noise",
      "noisy",
      "none",
      "noon",
      "nor",
      "north",
      "northern",
      "nose",
      "not",
      "note",
      "nothing",
      "notice",
      "november",
      "now",
      "nowhere",
      "number",
      "nurse",
      "nut",
      "oak",
      "oar",
      "oatmeal",
      "oats",
      "obey",
      "ocean",
      "o'clock",
      "october",
      "odd",
      "of",
      "off",
      "offer",
      "office",
      "officer",
      "often",
      "oh",
      "oil",
      "old",
      "old-fashioned",
      "on",
      "once",
      "one",
      "onion",
      "only",
      "onward",
      "open",
      "or",
      "orange",
      "orchard",
      "order",
      "ore",
      "organ",
      "other",
      "otherwise",
      "ouch",
      "ought",
      "our",
      "ours",
      "ourselves",
      "out",
      "outdoors",
      "outfit",
      "outlaw",
      "outline",
      "outside",
      "outward",
      "oven",
      "over",
      "overalls",
      "overcoat",
      "overeat",
      "overhead",
      "overhear",
      "overnight",
      "overturn",
      "owe",
      "owing",
      "owl",
      "own",
      "owner",
      "ox",
      "pa",
      "pace",
      "pack",
      "package",
      "pad",
      "page",
      "paid",
      "pail",
      "pain",
      "painful",
      "paint",
      "painter",
      "painting",
      "pair",
      "pal",
      "palace",
      "pale",
      "pan",
      "pancake",
      "pane",
      "pansy",
      "pants",
      "papa",
      "paper",
      "parade",
      "pardon",
      "parent",
      "park",
      "part",
      "partly",
      "partner",
      "party",
      "pass",
      "passenger",
      "past",
      "paste",
      "pasture",
      "pat",
      "patch",
      "path",
      "patter",
      "pave",
      "pavement",
      "paw",
      "pay",
      "payment",
      "pea",
      "peas",
      "peace",
      "peaceful",
      "peach",
      "peaches",
      "peak",
      "peanut",
      "pear",
      "pearl",
      "peck",
      "peek",
      "peel",
      "peep",
      "peg",
      "pen",
      "pencil",
      "penny",
      "people",
      "pepper",
      "peppermint",
      "perfume",
      "perhaps",
      "person",
      "pet",
      "phone",
      "piano",
      "pick",
      "pickle",
      "picnic",
      "picture",
      "pie",
      "piece",
      "pig",
      "pigeon",
      "piggy",
      "pile",
      "pill",
      "pillow",
      "pin",
      "pine",
      "pineapple",
      "pink",
      "pint",
      "pipe",
      "pistol",
      "pit",
      "pitch",
      "pitcher",
      "pity",
      "place",
      "plain",
      "plan",
      "plane",
      "plant",
      "plate",
      "platform",
      "platter",
      "play",
      "player",
      "playground",
      "playhouse",
      "playmate",
      "plaything",
      "pleasant",
      "please",
      "pleasure",
      "plenty",
      "plow",
      "plug",
      "plum",
      "pocket",
      "pocketbook",
      "poem",
      "point",
      "poison",
      "poke",
      "pole",
      "police",
      "policeman",
      "polish",
      "polite",
      "pond",
      "ponies",
      "pony",
      "pool",
      "poor",
      "pop",
      "popcorn",
      "popped",
      "porch",
      "pork",
      "possible",
      "post",
      "postage",
      "postman",
      "pot",
      "potato",
      "potatoes",
      "pound",
      "pour",
      "powder",
      "power",
      "powerful",
      "praise",
      "pray",
      "prayer",
      "prepare",
      "present",
      "pretty",
      "price",
      "prick",
      "prince",
      "princess",
      "print",
      "prison",
      "prize",
      "promise",
      "proper",
      "protect",
      "proud",
      "prove",
      "prune",
      "public",
      "puddle",
      "puff",
      "pull",
      "pump",
      "pumpkin",
      "punch",
      "punish",
      "pup",
      "pupil",
      "puppy",
      "pure",
      "purple",
      "purse",
      "push",
      "puss",
      "pussy",
      "pussycat",
      "put",
      "putting",
      "puzzle",
      "quack",
      "quart",
      "quarter",
      "queen",
      "queer",
      "question",
      "quick",
      "quickly",
      "quiet",
      "quilt",
      "quit",
      "quite",
      "rabbit",
      "race",
      "rack",
      "radio",
      "radish",
      "rag",
      "rail",
      "railroad",
      "railway",
      "rain",
      "rainy",
      "rainbow",
      "raise",
      "raisin",
      "rake",
      "ram",
      "ran",
      "ranch",
      "rang",
      "rap",
      "rapidly",
      "rat",
      "rate",
      "rather",
      "rattle",
      "raw",
      "ray",
      "reach",
      "read",
      "reader",
      "reading",
      "ready",
      "real",
      "really",
      "reap",
      "rear",
      "reason",
      "rebuild",
      "receive",
      "recess",
      "record",
      "red",
      "redbird",
      "redbreast",
      "refuse",
      "reindeer",
      "rejoice",
      "remain",
      "remember",
      "remind",
      "remove",
      "rent",
      "repair",
      "repay",
      "repeat",
      "report",
      "rest",
      "return",
      "review",
      "reward",
      "rib",
      "ribbon",
      "rice",
      "rich",
      "rid",
      "riddle",
      "ride",
      "rider",
      "riding",
      "right",
      "rim",
      "ring",
      "rip",
      "ripe",
      "rise",
      "rising",
      "river",
      "road",
      "roadside",
      "roar",
      "roast",
      "rob",
      "robber",
      "robe",
      "robin",
      "rock",
      "rocky",
      "rocket",
      "rode",
      "roll",
      "roller",
      "roof",
      "room",
      "rooster",
      "root",
      "rope",
      "rose",
      "rosebud",
      "rot",
      "rotten",
      "rough",
      "round",
      "route",
      "row",
      "rowboat",
      "royal",
      "rub",
      "rubbed",
      "rubber",
      "rubbish",
      "rug",
      "rule",
      "ruler",
      "rumble",
      "run",
      "rung",
      "runner",
      "running",
      "rush",
      "rust",
      "rusty",
      "rye",
      "sack",
      "sad",
      "saddle",
      "sadness",
      "safe",
      "safety",
      "said",
      "sail",
      "sailboat",
      "sailor",
      "saint",
      "salad",
      "sale",
      "salt",
      "same",
      "sand",
      "sandy",
      "sandwich",
      "sang",
      "sank",
      "sap",
      "sash",
      "sat",
      "satin",
      "satisfactory",
      "saturday",
      "sausage",
      "savage",
      "save",
      "savings",
      "saw",
      "say",
      "scab",
      "scales",
      "scare",
      "scarf",
      "school",
      "schoolboy",
      "schoolhouse",
      "schoolmaster",
      "schoolroom",
      "scorch",
      "score",
      "scrap",
      "scrape",
      "scratch",
      "scream",
      "screen",
      "screw",
      "scrub",
      "sea",
      "seal",
      "seam",
      "search",
      "season",
      "seat",
      "second",
      "secret",
      "see",
      "seeing",
      "seed",
      "seek",
      "seem",
      "seen",
      "seesaw",
      "select",
      "self",
      "selfish",
      "sell",
      "send",
      "sense",
      "sent",
      "sentence",
      "separate",
      "september",
      "servant",
      "serve",
      "service",
      "set",
      "setting",
      "settle",
      "settlement",
      "seven",
      "seventeen",
      "seventh",
      "seventy",
      "several",
      "sew",
      "shade",
      "shadow",
      "shady",
      "shake",
      "shaker",
      "shaking",
      "shall",
      "shame",
      "shan't",
      "shape",
      "share",
      "sharp",
      "shave",
      "she",
      "she'd",
      "she'll",
      "she's",
      "shear",
      "shears",
      "shed",
      "sheep",
      "sheet",
      "shelf",
      "shell",
      "shepherd",
      "shine",
      "shining",
      "shiny",
      "ship",
      "shirt",
      "shock",
      "shoe",
      "shoemaker",
      "shone",
      "shook",
      "shoot",
      "shop",
      "shopping",
      "shore",
      "short",
      "shot",
      "should",
      "shoulder",
      "shouldn't",
      "shout",
      "shovel",
      "show",
      "shower",
      "shut",
      "shy",
      "sick",
      "sickness",
      "side",
      "sidewalk",
      "sideways",
      "sigh",
      "sight",
      "sign",
      "silence",
      "silent",
      "silk",
      "sill",
      "silly",
      "silver",
      "simple",
      "sin",
      "since",
      "sing",
      "singer",
      "single",
      "sink",
      "sip",
      "sir",
      "sis",
      "sissy",
      "sister",
      "sit",
      "sitting",
      "six",
      "sixteen",
      "sixth",
      "sixty",
      "size",
      "skate",
      "skater",
      "ski",
      "skin",
      "skip",
      "skirt",
      "sky",
      "slam",
      "slap",
      "slate",
      "slave",
      "sled",
      "sleep",
      "sleepy",
      "sleeve",
      "sleigh",
      "slept",
      "slice",
      "slid",
      "slide",
      "sling",
      "slip",
      "slipped",
      "slipper",
      "slippery",
      "slit",
      "slow",
      "slowly",
      "sly",
      "smack",
      "small",
      "smart",
      "smell",
      "smile",
      "smoke",
      "smooth",
      "snail",
      "snake",
      "snap",
      "snapping",
      "sneeze",
      "snow",
      "snowy",
      "snowball",
      "snowflake",
      "snuff",
      "snug",
      "so",
      "soak",
      "soap",
      "sob",
      "socks",
      "sod",
      "soda",
      "sofa",
      "soft",
      "soil",
      "sold",
      "soldier",
      "sole",
      "some",
      "somebody",
      "somehow",
      "someone",
      "something",
      "sometime",
      "sometimes",
      "somewhere",
      "son",
      "song",
      "soon",
      "sore",
      "sorrow",
      "sorry",
      "sort",
      "soul",
      "sound",
      "soup",
      "sour",
      "south",
      "southern",
      "space",
      "spade",
      "spank",
      "sparrow",
      "speak",
      "speaker",
      "spear",
      "speech",
      "speed",
      "spell",
      "spelling",
      "spend",
      "spent",
      "spider",
      "spike",
      "spill",
      "spin",
      "spinach",
      "spirit",
      "spit",
      "splash",
      "spoil",
      "spoke",
      "spook",
      "spoon",
      "sport",
      "spot",
      "spread",
      "spring",
      "springtime",
      "sprinkle",
      "square",
      "squash",
      "squeak",
      "squeeze",
      "squirrel",
      "stable",
      "stack",
      "stage",
      "stair",
      "stall",
      "stamp",
      "stand",
      "star",
      "stare",
      "start",
      "starve",
      "state",
      "station",
      "stay",
      "steak",
      "steal",
      "steam",
      "steamboat",
      "steamer",
      "steel",
      "steep",
      "steeple",
      "steer",
      "stem",
      "step",
      "stepping",
      "stick",
      "sticky",
      "stiff",
      "still",
      "stillness",
      "sting",
      "stir",
      "stitch",
      "stock",
      "stocking",
      "stole",
      "stone",
      "stood",
      "stool",
      "stoop",
      "stop",
      "stopped",
      "stopping",
      "store",
      "stork",
      "stories",
      "storm",
      "stormy",
      "story",
      "stove",
      "straight",
      "strange",
      "stranger",
      "strap",
      "straw",
      "strawberry",
      "stream",
      "street",
      "stretch",
      "string",
      "strip",
      "stripes",
      "strong",
      "stuck",
      "study",
      "stuff",
      "stump",
      "stung",
      "subject",
      "such",
      "suck",
      "sudden",
      "suffer",
      "sugar",
      "suit",
      "sum",
      "summer",
      "sun",
      "sunday",
      "sunflower",
      "sung",
      "sunk",
      "sunlight",
      "sunny",
      "sunrise",
      "sunset",
      "sunshine",
      "supper",
      "suppose",
      "sure",
      "surely",
      "surface",
      "surprise",
      "swallow",
      "swam",
      "swamp",
      "swan",
      "swat",
      "swear",
      "sweat",
      "sweater",
      "sweep",
      "sweet",
      "sweetness",
      "sweetheart",
      "swell",
      "swept",
      "swift",
      "swim",
      "swimming",
      "swing",
      "switch",
      "sword",
      "swore",
      "table",
      "tablecloth",
      "tablespoon",
      "tablet",
      "tack",
      "tag",
      "tail",
      "tailor",
      "take",
      "taken",
      "taking",
      "tale",
      "talk",
      "talker",
      "tall",
      "tame",
      "tan",
      "tank",
      "tap",
      "tape",
      "tar",
      "tardy",
      "task",
      "taste",
      "taught",
      "tax",
      "tea",
      "teach",
      "teacher",
      "team",
      "tear",
      "tease",
      "teaspoon",
      "teeth",
      "telephone",
      "tell",
      "temper",
      "ten",
      "tennis",
      "tent",
      "term",
      "terrible",
      "test",
      "than",
      "thank",
      "thanks",
      "thankful",
      "thanksgiving",
      "that",
      "that's",
      "the",
      "theater",
      "thee",
      "their",
      "them",
      "then",
      "there",
      "these",
      "they",
      "they'd",
      "they'll",
      "they're",
      "they've",
      "thick",
      "thief",
      "thimble",
      "thin",
      "thing",
      "think",
      "third",
      "thirsty",
      "thirteen",
      "thirty",
      "this",
      "thorn",
      "those",
      "though",
      "thought",
      "thousand",
      "thread",
      "three",
      "threw",
      "throat",
      "throne",
      "through",
      "throw",
      "thrown",
      "thumb",
      "thunder",
      "thursday",
      "thy",
      "tick",
      "ticket",
      "tickle",
      "tie",
      "tiger",
      "tight",
      "till",
      "time",
      "tin",
      "tinkle",
      "tiny",
      "tip",
      "tiptoe",
      "tire",
      "tired",
      "title",
      "to",
      "toad",
      "toadstool",
      "toast",
      "tobacco",
      "today",
      "toe",
      "together",
      "toilet",
      "told",
      "tomato",
      "tomorrow",
      "ton",
      "tone",
      "tongue",
      "tonight",
      "too",
      "took",
      "tool",
      "toot",
      "tooth",
      "toothbrush",
      "toothpick",
      "top",
      "tore",
      "torn",
      "toss",
      "touch",
      "tow",
      "toward",
      "towards",
      "towel",
      "tower",
      "town",
      "toy",
      "trace",
      "track",
      "trade",
      "train",
      "tramp",
      "trap",
      "tray",
      "treasure",
      "treat",
      "tree",
      "trick",
      "tricycle",
      "tried",
      "trim",
      "trip",
      "trolley",
      "trouble",
      "truck",
      "true",
      "truly",
      "trunk",
      "trust",
      "truth",
      "try",
      "tub",
      "tuesday",
      "tug",
      "tulip",
      "tumble",
      "tune",
      "tunnel",
      "turkey",
      "turn",
      "turtle",
      "twelve",
      "twenty",
      "twice",
      "twig",
      "twin",
      "two",
      "ugly",
      "umbrella",
      "uncle",
      "under",
      "understand",
      "underwear",
      "undress",
      "unfair",
      "unfinished",
      "unfold",
      "unfriendly",
      "unhappy",
      "unhurt",
      "uniform",
      "united",
      "states",
      "unkind",
      "unknown",
      "unless",
      "unpleasant",
      "until",
      "unwilling",
      "up",
      "upon",
      "upper",
      "upset",
      "upside",
      "upstairs",
      "uptown",
      "upward",
      "us",
      "use",
      "used",
      "useful",
      "valentine",
      "valley",
      "valuable",
      "value",
      "vase",
      "vegetable",
      "velvet",
      "very",
      "vessel",
      "victory",
      "view",
      "village",
      "vine",
      "violet",
      "visit",
      "visitor",
      "voice",
      "vote",
      "wag",
      "wagon",
      "waist",
      "wait",
      "wake",
      "waken",
      "walk",
      "wall",
      "walnut",
      "want",
      "war",
      "warm",
      "warn",
      "was",
      "wash",
      "washer",
      "washtub",
      "wasn't",
      "waste",
      "watch",
      "watchman",
      "water",
      "watermelon",
      "waterproof",
      "wave",
      "wax",
      "way",
      "wayside",
      "we",
      "weak",
      "weakness",
      "weaken",
      "wealth",
      "weapon",
      "wear",
      "weary",
      "weather",
      "weave",
      "web",
      "we'd",
      "wedding",
      "wednesday",
      "wee",
      "weed",
      "week",
      "we'll",
      "weep",
      "weigh",
      "welcome",
      "well",
      "went",
      "were",
      "we're",
      "west",
      "western",
      "wet",
      "we've",
      "whale",
      "what",
      "what's",
      "wheat",
      "wheel",
      "when",
      "whenever",
      "where",
      "which",
      "while",
      "whip",
      "whipped",
      "whirl",
      "whisky",
      "whiskey",
      "whisper",
      "whistle",
      "white",
      "who",
      "who'd",
      "whole",
      "who'll",
      "whom",
      "who's",
      "whose",
      "why",
      "wicked",
      "wide",
      "wife",
      "wiggle",
      "wild",
      "wildcat",
      "will",
      "willing",
      "willow",
      "win",
      "wind",
      "windy",
      "windmill",
      "window",
      "wine",
      "wing",
      "wink",
      "winner",
      "winter",
      "wipe",
      "wire",
      "wise",
      "wish",
      "wit",
      "witch",
      "with",
      "without",
      "woke",
      "wolf",
      "woman",
      "women",
      "won",
      "wonder",
      "wonderful",
      "won't",
      "wood",
      "wooden",
      "woodpecker",
      "woods",
      "wool",
      "woolen",
      "word",
      "wore",
      "work",
      "worker",
      "workman",
      "world",
      "worm",
      "worn",
      "worry",
      "worse",
      "worst",
      "worth",
      "would",
      "wouldn't",
      "wound",
      "wove",
      "wrap",
      "wrapped",
      "wreck",
      "wren",
      "wring",
      "write",
      "writing",
      "written",
      "wrong",
      "wrote",
      "wrung",
      "yard",
      "yarn",
      "year",
      "yell",
      "yellow",
      "yes",
      "yesterday",
      "yet",
      "yolk",
      "yonder",
      "you",
      "you'd",
      "you'll",
      "young",
      "youngster",
      "your",
      "yours",
      "you're",
      "yourself",
      "yourselves",
      "youth",
      "you've"
    ];
    module2.exports = easyWords;
  }
});

// node_modules/text-readability/main.js
var require_main = __commonJS({
  "node_modules/text-readability/main.js"(exports, module2) {
    var path = require("path");
    var syllable2 = require_syllable();
    var pluralize2 = require_pluralize2();
    var punctuationRE = /[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-./:;<=>?@[\]^_`{|}~]/g;
    var easyWords = require_easy_words();
    var easyWordSet = new Set(easyWords);
    Math.copySign = (x, y) => {
      return x * (y / Math.abs(y));
    };
    Math.legacyRound = (number, points = 0) => {
      const p = 10 ** points;
      return Math.floor(number * p + Math.copySign(0.5, number)) / p;
    };
    var Readability = class {
      static getGradeSuffix(grade) {
        grade = Math.floor(grade);
        const gradeMap = {
          1: "st",
          2: "nd",
          3: "rd"
        };
        return gradeMap[grade] ? gradeMap[grade] : "th";
      }
      charCount(text, ignoreSpaces = true) {
        if (ignoreSpaces)
          text = text.replace(/ /g, "");
        return text.length;
      }
      letterCount(text, ignoreSpaces = true) {
        if (ignoreSpaces)
          text = text.replace(/ /g, "");
        return this.removePunctuation(text).length;
      }
      removePunctuation(text) {
        text = text.replace(punctuationRE, "");
        return text;
      }
      static split(text) {
        text = text.split(/,| |\n|\r/g);
        text = text.filter((n) => n);
        return text;
      }
      lexiconCount(text, removePunctuation = true) {
        if (removePunctuation)
          text = this.removePunctuation(text);
        text = text.split(/,| |\n|\r/g);
        text = text.filter((n) => n);
        return text.length;
      }
      syllableCount(text, lang = "en-US") {
        text = text.toLocaleLowerCase(lang);
        text = this.removePunctuation(text);
        if (!text)
          return 0;
        const count = syllable2(text);
        return count;
      }
      sentenceCount(text) {
        let ignoreCount = 0;
        let sentences = text.split(/ *[.?!]['")\]]*[ |\n](?=[A-Z])/g);
        for (let sentence of sentences) {
          if (this.lexiconCount(sentence) <= 2)
            ignoreCount += 1;
        }
        const validSentences = sentences.length - ignoreCount;
        return validSentences > 1 ? validSentences : 1;
      }
      averageSentenceLength(text) {
        const asl = this.lexiconCount(text) / this.sentenceCount(text);
        const returnVal = Math.legacyRound(asl, 1);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      averageSyllablePerWord(text) {
        const syllables = this.syllableCount(text);
        const words = this.lexiconCount(text);
        const syllablePerWord = syllables / words;
        const returnVal = Math.legacyRound(syllablePerWord, 1);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      averageCharacterPerWord(text) {
        const charactersPerWord = this.charCount(text) / this.lexiconCount(text);
        const returnVal = Math.legacyRound(charactersPerWord, 2);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      averageLetterPerWord(text) {
        const lettersPerWord = this.letterCount(text) / this.lexiconCount(text);
        const returnVal = Math.legacyRound(lettersPerWord, 2);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      averageSentencePerWord(text) {
        const sentencesPerWord = this.sentenceCount(text) / this.lexiconCount(text);
        const returnVal = Math.legacyRound(sentencesPerWord, 2);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      fleschReadingEase(text) {
        const sentenceLength = this.averageSentenceLength(text);
        const syllablesPerWord = this.averageSyllablePerWord(text);
        const flesch = 206.835 - 1.015 * sentenceLength - 84.6 * syllablesPerWord;
        const returnVal = Math.legacyRound(flesch, 2);
        return returnVal;
      }
      fleschReadingEaseToGrade(score) {
        if (score < 100 && score >= 90)
          return 5;
        else if (score < 90 && score >= 80)
          return 6;
        else if (score < 80 && score >= 70)
          return 7;
        else if (score < 70 && score >= 60)
          return 8.5;
        else if (score < 60 && score >= 50)
          return 11;
        else if (score < 50 && score >= 40)
          return 13;
        else if (score < 40 && score >= 30)
          return 15;
        else
          return 16;
      }
      fleschKincaidGrade(text) {
        const sentenceLength = this.averageSentenceLength(text);
        const syllablePerWord = this.averageSyllablePerWord(text);
        const flesch = 0.39 * sentenceLength + 11.8 * syllablePerWord - 15.59;
        const returnVal = Math.legacyRound(flesch, 1);
        return returnVal;
      }
      polySyllableCount(text) {
        let count = 0;
        let wrds;
        for (let word of Readability.split(text)) {
          wrds = this.syllableCount(word);
          if (wrds >= 3)
            count += 1;
        }
        return count;
      }
      smogIndex(text) {
        const sentences = this.sentenceCount(text);
        if (sentences >= 3) {
          const polySyllab = this.polySyllableCount(text);
          const smog = 1.043 * (30 * (polySyllab / sentences)) ** 0.5 + 3.1291;
          const returnVal = Math.legacyRound(smog, 1);
          return !isNaN(returnVal) ? returnVal : 0;
        }
        return 0;
      }
      colemanLiauIndex(text) {
        const letters = Math.legacyRound(this.averageLetterPerWord(text) * 100, 2);
        const sentences = Math.legacyRound(this.averageSentencePerWord(text) * 100, 2);
        const coleman = 0.058 * letters - 0.296 * sentences - 15.8;
        return Math.legacyRound(coleman, 2);
      }
      automatedReadabilityIndex(text) {
        const characters = this.charCount(text);
        const words = this.lexiconCount(text);
        const sentences = this.sentenceCount(text);
        const averageCharacterPerWord2 = characters / words;
        const averageWordPerSentence = words / sentences;
        const readability2 = 4.71 * Math.legacyRound(averageCharacterPerWord2, 2) + 0.5 * Math.legacyRound(averageWordPerSentence, 2) - 21.43;
        const returnVal = Math.legacyRound(readability2, 1);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      linsearWriteFormula(text) {
        let easyWord = 0;
        let difficultWord = 0;
        let textList = Readability.split(text).slice(0, 100);
        for (let word of textList) {
          if (this.syllableCount(word) < 3) {
            easyWord += 1;
          } else {
            difficultWord += 1;
          }
        }
        text = textList.join(" ");
        let number = (easyWord * 1 + difficultWord * 3) / this.sentenceCount(text);
        let returnVal = number <= 20 ? (number - 2) / 2 : number / 2;
        returnVal = Math.legacyRound(returnVal, 1);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      presentTense(word) {
        if (word.length < 6)
          return word;
        if (word.endsWith("ed")) {
          if (easyWordSet.has(word.slice(0, -1)))
            return word.slice(0, -1);
          else
            return word.slice(0, -2);
        }
        if (word.endsWith("ing")) {
          const suffixIngToE = word.slice(0, -3) + "e";
          if (easyWordSet.has(suffixIngToE))
            return suffixIngToE;
          else
            return word.slice(0, -3);
        }
        return word;
      }
      difficultWords(text, syllableThreshold = 2) {
        const textList = text.match(/[\w=‘’]+/g);
        const diffWordsSet = /* @__PURE__ */ new Set();
        if (textList === null)
          return diffWordsSet;
        for (let word of textList) {
          const normalized = this.presentTense(pluralize2(word.toLocaleLowerCase(), 1));
          if (!easyWordSet.has(normalized) && this.syllableCount(word) >= syllableThreshold) {
            diffWordsSet.add(word);
          }
        }
        return [...diffWordsSet].length;
      }
      daleChallReadabilityScore(text) {
        const wordCount = this.lexiconCount(text);
        const count = wordCount - this.difficultWords(text);
        const per = count / wordCount * 100;
        if (isNaN(per))
          return 0;
        const difficultWords2 = 100 - per;
        let score = 0.1579 * difficultWords2 + 0.0496 * this.averageSentenceLength(text);
        if (difficultWords2 > 5)
          score += 3.6365;
        return Math.legacyRound(score, 2);
      }
      daleChallToGrade(score) {
        if (score <= 4.9)
          return 4;
        if (score < 5.9)
          return 5;
        if (score < 6.9)
          return 7;
        if (score < 7.9)
          return 9;
        if (score < 8.9)
          return 11;
        if (score < 9.9)
          return 13;
        else
          return 16;
      }
      gunningFog(text) {
        const perDiffWords = this.difficultWords(text, 3) / this.lexiconCount(text) * 100;
        const grade = 0.4 * (this.averageSentenceLength(text) + perDiffWords);
        const returnVal = Math.legacyRound(grade, 2);
        return !isNaN(returnVal) ? returnVal : 0;
      }
      lix(text) {
        const words = Readability.split(text);
        const wordsLen = words.length;
        const longWords = words.filter((wrd) => wrd.length > 6).length;
        const perLongWords = longWords * 100 / wordsLen;
        const asl = this.averageSentenceLength(text);
        const lix = asl + perLongWords;
        return Math.legacyRound(lix, 2);
      }
      rix(text) {
        const words = Readability.split(text);
        const longWordsCount = words.filter((wrd) => wrd.length > 6).length;
        const sentencesCount = this.sentenceCount(text);
        const rix = longWordsCount / sentencesCount;
        return !isNaN(rix) ? Math.legacyRound(rix, 2) : 0;
      }
      textStandard(text, floatOutput = null) {
        const grade = [];
        let lower = Math.legacyRound(this.fleschKincaidGrade(text));
        let upper = Math.ceil(this.fleschKincaidGrade(text));
        grade.push(Math.floor(lower));
        grade.push(Math.floor(upper));
        let score = this.fleschReadingEase(text);
        let freGrade = this.fleschReadingEaseToGrade(score);
        grade.push(freGrade);
        lower = Math.legacyRound(this.smogIndex(text));
        upper = Math.ceil(this.smogIndex(text));
        grade.push(Math.floor(lower));
        grade.push(Math.floor(upper));
        lower = Math.legacyRound(this.colemanLiauIndex(text));
        upper = Math.ceil(this.colemanLiauIndex(text));
        grade.push(Math.floor(lower));
        grade.push(Math.floor(upper));
        lower = Math.legacyRound(this.automatedReadabilityIndex(text));
        upper = Math.ceil(this.automatedReadabilityIndex(text));
        grade.push(Math.floor(lower));
        grade.push(Math.floor(upper));
        lower = Math.legacyRound(this.daleChallToGrade(this.daleChallReadabilityScore(text)));
        upper = Math.ceil(this.daleChallToGrade(this.daleChallReadabilityScore(text)));
        grade.push(Math.floor(lower));
        grade.push(Math.floor(upper));
        lower = Math.legacyRound(this.linsearWriteFormula(text));
        upper = Math.ceil(this.linsearWriteFormula(text));
        grade.push(Math.floor(lower));
        grade.push(Math.floor(upper));
        lower = Math.legacyRound(this.gunningFog(text));
        upper = Math.ceil(this.gunningFog(text));
        grade.push(Math.floor(lower));
        grade.push(Math.floor(upper));
        const counterMap = [...new Set(grade)].map((x) => [x, grade.filter((y) => y === x).length]);
        const finalGrade = counterMap.reduce((x, y) => y[1] >= x[1] ? y : x);
        score = finalGrade[0];
        if (floatOutput)
          return score;
        const lowerScore = Math.floor(score) - 1;
        const upperScore = lowerScore + 1;
        return `${lowerScore}${Readability.getGradeSuffix(lowerScore)} and ${upperScore}${Readability.getGradeSuffix(upperScore)} grade`;
      }
      textMedian(text) {
        const grade = [];
        grade.push(this.fleschKincaidGrade(text));
        const score = this.fleschReadingEase(text);
        const freGrade = this.fleschReadingEaseToGrade(score);
        grade.push(freGrade);
        grade.push(this.smogIndex(text));
        grade.push(this.colemanLiauIndex(text));
        grade.push(this.automatedReadabilityIndex(text));
        grade.push(this.daleChallToGrade(this.daleChallReadabilityScore(text)));
        grade.push(this.linsearWriteFormula(text));
        grade.push(this.gunningFog(text));
        grade.sort(function(a, b) {
          return a - b;
        });
        let half = Math.floor(grade.length / 2);
        if (half & 1)
          return (grade[half - 1] + grade[half]) / 2;
        else
          return grade[half];
      }
    };
    var readability = new Readability();
    module2.exports = readability;
  }
});

// node_modules/marked-plaintext/index.js
var require_marked_plaintext = __commonJS({
  "node_modules/marked-plaintext/index.js"(exports, module2) {
    function Renderer(options2) {
      this.options = options2 || {};
      this.whitespaceDelimiter = this.options.spaces ? " " : "\n";
    }
    Renderer.prototype.code = function(code, lang, escaped) {
      return this.whitespaceDelimiter + this.whitespaceDelimiter + code + this.whitespaceDelimiter + this.whitespaceDelimiter;
    };
    Renderer.prototype.blockquote = function(quote) {
      return "	" + quote + this.whitespaceDelimiter;
    };
    Renderer.prototype.html = function(html) {
      return html;
    };
    Renderer.prototype.heading = function(text, level, raw) {
      return text;
    };
    Renderer.prototype.hr = function() {
      return this.whitespaceDelimiter + this.whitespaceDelimiter;
    };
    Renderer.prototype.list = function(body, ordered) {
      return body;
    };
    Renderer.prototype.listitem = function(text) {
      return "	" + text + this.whitespaceDelimiter;
    };
    Renderer.prototype.paragraph = function(text) {
      return this.whitespaceDelimiter + text + this.whitespaceDelimiter;
    };
    Renderer.prototype.table = function(header, body) {
      return this.whitespaceDelimiter + header + this.whitespaceDelimiter + body + this.whitespaceDelimiter;
    };
    Renderer.prototype.tablerow = function(content) {
      return content + this.whitespaceDelimiter;
    };
    Renderer.prototype.tablecell = function(content, flags) {
      return content + "	";
    };
    Renderer.prototype.strong = function(text) {
      return text;
    };
    Renderer.prototype.em = function(text) {
      return text;
    };
    Renderer.prototype.codespan = function(text) {
      return text;
    };
    Renderer.prototype.br = function() {
      return this.whitespaceDelimiter + this.whitespaceDelimiter;
    };
    Renderer.prototype.del = function(text) {
      return text;
    };
    Renderer.prototype.link = function(href, title, text) {
      return text;
    };
    Renderer.prototype.image = function(href, title, text) {
      return text;
    };
    Renderer.prototype.text = function(text) {
      return text;
    };
    module2.exports = Renderer;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TextAnalysisPlugin
});
module.exports = __toCommonJS(main_exports);

// AnalysisGenerator.ts
var import_obsidian = require("obsidian");
var textReadability = __toESM(require_main());

// node_modules/marked/lib/marked.esm.js
function _getDefaults() {
  return {
    async: false,
    breaks: false,
    extensions: null,
    gfm: true,
    hooks: null,
    pedantic: false,
    renderer: null,
    silent: false,
    tokenizer: null,
    walkTokens: null
  };
}
var _defaults = _getDefaults();
function changeDefaults(newDefaults) {
  _defaults = newDefaults;
}
var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, "g");
var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
var caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = typeof regex === "string" ? regex : regex.source;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = typeof val === "object" && "source" in val ? val.source : val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
function cleanUrl(href) {
  try {
    href = encodeURI(href).replace(/%25/g, "%");
  } catch (e) {
    return null;
  }
  return href;
}
var noopTest = { exec: () => null };
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match, offset, str) => {
    let escaped = false;
    let curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (count) {
    if (cells.length > count) {
      cells.splice(count);
    } else {
      while (cells.length < count)
        cells.push("");
    }
  }
  for (; i < cells.length; i++) {
    cells[i] = cells[i].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  let level = 0;
  for (let i = 0; i < str.length; i++) {
    if (str[i] === "\\") {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  return -1;
}
function outputLink(cap, link, raw, lexer2) {
  const href = link.href;
  const title = link.title ? escape(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer2.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href,
      title,
      text,
      tokens: lexer2.inlineTokens(text)
    };
    lexer2.state.inLink = false;
    return token;
  }
  return {
    type: "image",
    raw,
    href,
    title,
    text: escape(text)
  };
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return text.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var _Tokenizer = class {
  constructor(options2) {
    __publicField(this, "options");
    // TODO: Fix this rules type
    __publicField(this, "rules");
    __publicField(this, "lexer");
    this.options = options2 || _defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text, "\n") : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, "#");
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = rtrim(cap[0].replace(/^ *>[ \t]?/gm, ""), "\n");
      const top = this.lexer.state.top;
      this.lexer.state.top = true;
      const tokens = this.lexer.blockTokens(text);
      this.lexer.state.top = top;
      return {
        type: "blockquote",
        raw: cap[0],
        tokens,
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
      let raw = "";
      let itemContents = "";
      let endsWithBlankLine = false;
      while (src) {
        let endEarly = false;
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        let line = cap[2].split("\n", 1)[0].replace(/^\t+/, (t) => " ".repeat(3 * t.length));
        let nextLine = src.split("\n", 1)[0];
        let indent = 0;
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimStart();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        let blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`);
          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
          while (src) {
            const rawLine = src.split("\n", 1)[0];
            nextLine = rawLine;
            if (this.options.pedantic) {
              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (fencesBeginRegex.test(nextLine)) {
              break;
            }
            if (headingBeginRegex.test(nextLine)) {
              break;
            }
            if (nextBulletRegex.test(nextLine)) {
              break;
            }
            if (hrRegex.test(src)) {
              break;
            }
            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {
              itemContents += "\n" + nextLine.slice(indent);
            } else {
              if (blankLine) {
                break;
              }
              if (line.search(/[^ ]/) >= 4) {
                break;
              }
              if (fencesBeginRegex.test(line)) {
                break;
              }
              if (headingBeginRegex.test(line)) {
                break;
              }
              if (hrRegex.test(line)) {
                break;
              }
              itemContents += "\n" + nextLine;
            }
            if (!blankLine && !nextLine.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
            line = nextLine.slice(indent);
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        let istask = null;
        let ischecked;
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents,
          tokens: []
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimEnd();
      list.items[list.items.length - 1].text = itemContents.trimEnd();
      list.raw = list.raw.trimEnd();
      for (let i = 0; i < list.items.length; i++) {
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        if (!list.loose) {
          const spacers = list.items[i].tokens.filter((t) => t.type === "space");
          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => /\n.*\n/.test(t.raw));
          list.loose = hasMultipleLineBreaks;
        }
      }
      if (list.loose) {
        for (let i = 0; i < list.items.length; i++) {
          list.items[i].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        block: true,
        raw: cap[0],
        pre: cap[1] === "pre" || cap[1] === "script" || cap[1] === "style",
        text: cap[0]
      };
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
      return {
        type: "def",
        tag,
        raw: cap[0],
        href,
        title
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      if (!/[:|]/.test(cap[2])) {
        return;
      }
      const item = {
        type: "table",
        raw: cap[0],
        header: splitCells(cap[1]).map((c) => {
          return { text: c, tokens: [] };
        }),
        align: cap[2].replace(/^\||\| *$/g, "").split("|"),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        let l = item.align.length;
        let i, j, k, row;
        for (i = 0; i < l; i++) {
          const align = item.align[i];
          if (align) {
            if (/^ *-+: *$/.test(align)) {
              item.align[i] = "right";
            } else if (/^ *:-+: *$/.test(align)) {
              item.align[i] = "center";
            } else if (/^ *:-+ *$/.test(align)) {
              item.align[i] = "left";
            } else {
              item.align[i] = null;
            }
          }
        }
        l = item.rows.length;
        for (i = 0; i < l; i++) {
          item.rows[i] = splitCells(item.rows[i], item.header.length).map((c) => {
            return { text: c, tokens: [] };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = this.lexer.inline(item.header[j].text);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k = 0; k < row.length; k++) {
            row[k].tokens = this.lexer.inline(row[k].text);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: this.lexer.inline(cap[1])
      };
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
      return {
        type: "paragraph",
        raw: cap[0],
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      return {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: this.lexer.inline(cap[0])
      };
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        block: false,
        text: cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link) {
        const text = cap[0].charAt(0);
        return {
          type: "text",
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match)
      return;
    if (match[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match[1] || match[2] || "";
    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
      const lLength = [...match[0]].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match = endReg.exec(maskedSrc)) != null) {
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim)
          continue;
        rLength = [...rDelim].length;
        if (match[3] || match[4]) {
          delimTotal += rLength;
          continue;
        } else if (match[5] || match[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        const lastCharLength = [...match[0]][0].length;
        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
        if (Math.min(lLength, rLength) % 2) {
          const text2 = raw.slice(1, -1);
          return {
            type: "em",
            raw,
            text: text2,
            tokens: this.lexer.inlineTokens(text2)
          };
        }
        const text = raw.slice(2, -2);
        return {
          type: "strong",
          raw,
          text,
          tokens: this.lexer.inlineTokens(text)
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape(text, true);
      return {
        type: "codespan",
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2])
      };
    }
  }
  autolink(src) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href;
      if (cap[2] === "@") {
        text = escape(cap[1]);
        href = "mailto:" + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href;
      if (cap[2] === "@") {
        text = escape(cap[0]);
        href = "mailto:" + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape(cap[0]);
        if (cap[1] === "www.") {
          href = "http://" + cap[0];
        } else {
          href = cap[0];
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = cap[0];
      } else {
        text = escape(cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text
      };
    }
  }
};
var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^(?!bull )((?:.|\n(?!\s*?\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  // regex template, placeholders will be replaced according to different paragraph
  // interruption rules of commonmark and the original markdown spec:
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.lheading = edit(block.lheading).replace(/bull/g, block.bullet).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = { ...block };
block.gfm = {
  ...block.normal,
  table: "^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
  // Cells
};
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = {
  ...block.normal,
  html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
};
var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,
    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a
    rDelimAst: /^[^_*]*?__[^_*]*?\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\*)[punct](\*+)(?=[\s]|$)|[^punct\s](\*+)(?!\*)(?=[punct\s]|$)|(?!\*)[punct\s](\*+)(?=[^punct\s])|[\s](\*+)(?!\*)(?=[punct])|(?!\*)[punct](\*+)(?!\*)(?=[punct])|[^punct\s](\*+)(?=[^punct\s])/,
    rDelimUnd: /^[^_*]*?\*\*[^_*]*?_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\s]|$)|[^punct\s](_+)(?!_)(?=[punct\s]|$)|(?!_)[punct\s](_+)(?=[^punct\s])|[\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/
    // ^- Not allowed for _
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^((?![*_])[\spunctuation])/
};
inline._punctuation = "\\p{P}$+<=>`^|~";
inline.punctuation = edit(inline.punctuation, "u").replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g;
inline.anyPunctuation = /\\[punct]/g;
inline._escapes = /\\([punct])/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim, "u").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline.anyPunctuation = edit(inline.anyPunctuation, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = edit(inline._escapes, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = { ...inline };
inline.pedantic = {
  ...inline.normal,
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
};
inline.gfm = {
  ...inline.normal,
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
};
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = {
  ...inline.gfm,
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
};
var _Lexer = class {
  constructor(options2) {
    __publicField(this, "tokens");
    __publicField(this, "options");
    __publicField(this, "state");
    __publicField(this, "tokenizer");
    __publicField(this, "inlineQueue");
    this.tokens = [];
    this.tokens.links = /* @__PURE__ */ Object.create(null);
    this.options = options2 || _defaults;
    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  /**
   * Expose Rules
   */
  static get rules() {
    return {
      block,
      inline
    };
  }
  /**
   * Static Lex Method
   */
  static lex(src, options2) {
    const lexer2 = new _Lexer(options2);
    return lexer2.lex(src);
  }
  /**
   * Static Lex Inline Method
   */
  static lexInline(src, options2) {
    const lexer2 = new _Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  /**
   * Preprocessing
   */
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n");
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
    } else {
      src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
        return leading + "    ".repeat(tabs.length);
      });
    }
    let token;
    let lastToken;
    let cutSrc;
    let lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) {
          tokens[tokens.length - 1].raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach((getStartIndex) => {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens = []) {
    this.inlineQueue.push({ src, tokens });
    return tokens;
  }
  /**
   * Lexing/Compiling
   */
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach((getStartIndex) => {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var _Renderer = class {
  constructor(options2) {
    __publicField(this, "options");
    this.options = options2 || _defaults;
  }
  code(code, infostring, escaped) {
    var _a;
    const lang = (_a = (infostring || "").match(/^\S*/)) == null ? void 0 : _a[0];
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="language-' + escape(lang) + '">' + (escaped ? code : escape(code, true)) + "</code></pre>\n";
  }
  blockquote(quote) {
    return `<blockquote>
${quote}</blockquote>
`;
  }
  html(html, block2) {
    return html;
  }
  heading(text, level, raw) {
    return `<h${level}>${text}</h${level}>
`;
  }
  hr() {
    return "<hr>\n";
  }
  list(body, ordered, start) {
    const type = ordered ? "ol" : "ul";
    const startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
  }
  listitem(text, task, checked) {
    return `<li>${text}</li>
`;
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
  }
  paragraph(text) {
    return `<p>${text}</p>
`;
  }
  table(header, body) {
    if (body)
      body = `<tbody>${body}</tbody>`;
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow(content) {
    return `<tr>
${content}</tr>
`;
  }
  tablecell(content, flags) {
    const type = flags.header ? "th" : "td";
    const tag = flags.align ? `<${type} align="${flags.align}">` : `<${type}>`;
    return tag + content + `</${type}>
`;
  }
  /**
   * span level renderer
   */
  strong(text) {
    return `<strong>${text}</strong>`;
  }
  em(text) {
    return `<em>${text}</em>`;
  }
  codespan(text) {
    return `<code>${text}</code>`;
  }
  br() {
    return "<br>";
  }
  del(text) {
    return `<del>${text}</del>`;
  }
  link(href, title, text) {
    const cleanHref = cleanUrl(href);
    if (cleanHref === null) {
      return text;
    }
    href = cleanHref;
    let out = '<a href="' + href + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text + "</a>";
    return out;
  }
  image(href, title, text) {
    const cleanHref = cleanUrl(href);
    if (cleanHref === null) {
      return text;
    }
    href = cleanHref;
    let out = `<img src="${href}" alt="${text}"`;
    if (title) {
      out += ` title="${title}"`;
    }
    out += ">";
    return out;
  }
  text(text) {
    return text;
  }
};
var _TextRenderer = class {
  // no need for block level renderers
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href, title, text) {
    return "" + text;
  }
  image(href, title, text) {
    return "" + text;
  }
  br() {
    return "";
  }
};
var _Parser = class {
  constructor(options2) {
    __publicField(this, "options");
    __publicField(this, "renderer");
    __publicField(this, "textRenderer");
    this.options = options2 || _defaults;
    this.options.renderer = this.options.renderer || new _Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new _TextRenderer();
  }
  /**
   * Static Parse Method
   */
  static parse(tokens, options2) {
    const parser2 = new _Parser(options2);
    return parser2.parse(tokens);
  }
  /**
   * Static Parse Inline Method
   */
  static parseInline(tokens, options2) {
    const parser2 = new _Parser(options2);
    return parser2.parseInline(tokens);
  }
  /**
   * Parse Loop
   */
  parse(tokens, top = true) {
    let out = "";
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        const genericToken = token;
        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(genericToken.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          const headingToken = token;
          out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));
          continue;
        }
        case "code": {
          const codeToken = token;
          out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);
          continue;
        }
        case "table": {
          const tableToken = token;
          let header = "";
          let cell = "";
          for (let j = 0; j < tableToken.header.length; j++) {
            cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });
          }
          header += this.renderer.tablerow(cell);
          let body = "";
          for (let j = 0; j < tableToken.rows.length; j++) {
            const row = tableToken.rows[j];
            cell = "";
            for (let k = 0; k < row.length; k++) {
              cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          const blockquoteToken = token;
          const body = this.parse(blockquoteToken.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          const listToken = token;
          const ordered = listToken.ordered;
          const start = listToken.start;
          const loose = listToken.loose;
          let body = "";
          for (let j = 0; j < listToken.items.length; j++) {
            const item = listToken.items[j];
            const checked = item.checked;
            const task = item.task;
            let itemBody = "";
            if (item.task) {
              const checkbox = this.renderer.checkbox(!!checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox + " "
                  });
                }
              } else {
                itemBody += checkbox + " ";
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, !!checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          const htmlToken = token;
          out += this.renderer.html(htmlToken.text, htmlToken.block);
          continue;
        }
        case "paragraph": {
          const paragraphToken = token;
          out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));
          continue;
        }
        case "text": {
          let textToken = token;
          let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;
          while (i + 1 < tokens.length && tokens[i + 1].type === "text") {
            textToken = tokens[++i];
            body += "\n" + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return "";
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  /**
   * Parse Inline Tokens
   */
  parseInline(tokens, renderer2) {
    renderer2 = renderer2 || this.renderer;
    let out = "";
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          const escapeToken = token;
          out += renderer2.text(escapeToken.text);
          break;
        }
        case "html": {
          const tagToken = token;
          out += renderer2.html(tagToken.text);
          break;
        }
        case "link": {
          const linkToken = token;
          out += renderer2.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer2));
          break;
        }
        case "image": {
          const imageToken = token;
          out += renderer2.image(imageToken.href, imageToken.title, imageToken.text);
          break;
        }
        case "strong": {
          const strongToken = token;
          out += renderer2.strong(this.parseInline(strongToken.tokens, renderer2));
          break;
        }
        case "em": {
          const emToken = token;
          out += renderer2.em(this.parseInline(emToken.tokens, renderer2));
          break;
        }
        case "codespan": {
          const codespanToken = token;
          out += renderer2.codespan(codespanToken.text);
          break;
        }
        case "br": {
          out += renderer2.br();
          break;
        }
        case "del": {
          const delToken = token;
          out += renderer2.del(this.parseInline(delToken.tokens, renderer2));
          break;
        }
        case "text": {
          const textToken = token;
          out += renderer2.text(textToken.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return "";
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
var _Hooks = class {
  constructor(options2) {
    __publicField(this, "options");
    this.options = options2 || _defaults;
  }
  /**
   * Process markdown before marked
   */
  preprocess(markdown) {
    return markdown;
  }
  /**
   * Process HTML after marked is finished
   */
  postprocess(html) {
    return html;
  }
};
__publicField(_Hooks, "passThroughHooks", /* @__PURE__ */ new Set([
  "preprocess",
  "postprocess"
]));
var _parseMarkdown, parseMarkdown_fn, _onError, onError_fn;
var Marked = class {
  constructor(...args) {
    __privateAdd(this, _parseMarkdown);
    __privateAdd(this, _onError);
    __publicField(this, "defaults", _getDefaults());
    __publicField(this, "options", this.setOptions);
    __publicField(this, "parse", __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lex, _Parser.parse));
    __publicField(this, "parseInline", __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lexInline, _Parser.parseInline));
    __publicField(this, "Parser", _Parser);
    __publicField(this, "Renderer", _Renderer);
    __publicField(this, "TextRenderer", _TextRenderer);
    __publicField(this, "Lexer", _Lexer);
    __publicField(this, "Tokenizer", _Tokenizer);
    __publicField(this, "Hooks", _Hooks);
    this.use(...args);
  }
  /**
   * Run callback for every token
   */
  walkTokens(tokens, callback) {
    var _a, _b;
    let values = [];
    for (const token of tokens) {
      values = values.concat(callback.call(this, token));
      switch (token.type) {
        case "table": {
          const tableToken = token;
          for (const cell of tableToken.header) {
            values = values.concat(this.walkTokens(cell.tokens, callback));
          }
          for (const row of tableToken.rows) {
            for (const cell of row) {
              values = values.concat(this.walkTokens(cell.tokens, callback));
            }
          }
          break;
        }
        case "list": {
          const listToken = token;
          values = values.concat(this.walkTokens(listToken.items, callback));
          break;
        }
        default: {
          const genericToken = token;
          if ((_b = (_a = this.defaults.extensions) == null ? void 0 : _a.childTokens) == null ? void 0 : _b[genericToken.type]) {
            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {
              values = values.concat(this.walkTokens(genericToken[childTokens], callback));
            });
          } else if (genericToken.tokens) {
            values = values.concat(this.walkTokens(genericToken.tokens, callback));
          }
        }
      }
    }
    return values;
  }
  use(...args) {
    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
    args.forEach((pack) => {
      const opts = { ...pack };
      opts.async = this.defaults.async || opts.async || false;
      if (pack.extensions) {
        pack.extensions.forEach((ext) => {
          if (!ext.name) {
            throw new Error("extension name required");
          }
          if ("renderer" in ext) {
            const prevRenderer = extensions.renderers[ext.name];
            if (prevRenderer) {
              extensions.renderers[ext.name] = function(...args2) {
                let ret = ext.renderer.apply(this, args2);
                if (ret === false) {
                  ret = prevRenderer.apply(this, args2);
                }
                return ret;
              };
            } else {
              extensions.renderers[ext.name] = ext.renderer;
            }
          }
          if ("tokenizer" in ext) {
            if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
              throw new Error("extension level must be 'block' or 'inline'");
            }
            const extLevel = extensions[ext.level];
            if (extLevel) {
              extLevel.unshift(ext.tokenizer);
            } else {
              extensions[ext.level] = [ext.tokenizer];
            }
            if (ext.start) {
              if (ext.level === "block") {
                if (extensions.startBlock) {
                  extensions.startBlock.push(ext.start);
                } else {
                  extensions.startBlock = [ext.start];
                }
              } else if (ext.level === "inline") {
                if (extensions.startInline) {
                  extensions.startInline.push(ext.start);
                } else {
                  extensions.startInline = [ext.start];
                }
              }
            }
          }
          if ("childTokens" in ext && ext.childTokens) {
            extensions.childTokens[ext.name] = ext.childTokens;
          }
        });
        opts.extensions = extensions;
      }
      if (pack.renderer) {
        const renderer2 = this.defaults.renderer || new _Renderer(this.defaults);
        for (const prop in pack.renderer) {
          const rendererFunc = pack.renderer[prop];
          const rendererKey = prop;
          const prevRenderer = renderer2[rendererKey];
          renderer2[rendererKey] = (...args2) => {
            let ret = rendererFunc.apply(renderer2, args2);
            if (ret === false) {
              ret = prevRenderer.apply(renderer2, args2);
            }
            return ret || "";
          };
        }
        opts.renderer = renderer2;
      }
      if (pack.tokenizer) {
        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
        for (const prop in pack.tokenizer) {
          const tokenizerFunc = pack.tokenizer[prop];
          const tokenizerKey = prop;
          const prevTokenizer = tokenizer[tokenizerKey];
          tokenizer[tokenizerKey] = (...args2) => {
            let ret = tokenizerFunc.apply(tokenizer, args2);
            if (ret === false) {
              ret = prevTokenizer.apply(tokenizer, args2);
            }
            return ret;
          };
        }
        opts.tokenizer = tokenizer;
      }
      if (pack.hooks) {
        const hooks = this.defaults.hooks || new _Hooks();
        for (const prop in pack.hooks) {
          const hooksFunc = pack.hooks[prop];
          const hooksKey = prop;
          const prevHook = hooks[hooksKey];
          if (_Hooks.passThroughHooks.has(prop)) {
            hooks[hooksKey] = (arg) => {
              if (this.defaults.async) {
                return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) => {
                  return prevHook.call(hooks, ret2);
                });
              }
              const ret = hooksFunc.call(hooks, arg);
              return prevHook.call(hooks, ret);
            };
          } else {
            hooks[hooksKey] = (...args2) => {
              let ret = hooksFunc.apply(hooks, args2);
              if (ret === false) {
                ret = prevHook.apply(hooks, args2);
              }
              return ret;
            };
          }
        }
        opts.hooks = hooks;
      }
      if (pack.walkTokens) {
        const walkTokens2 = this.defaults.walkTokens;
        const packWalktokens = pack.walkTokens;
        opts.walkTokens = function(token) {
          let values = [];
          values.push(packWalktokens.call(this, token));
          if (walkTokens2) {
            values = values.concat(walkTokens2.call(this, token));
          }
          return values;
        };
      }
      this.defaults = { ...this.defaults, ...opts };
    });
    return this;
  }
  setOptions(opt) {
    this.defaults = { ...this.defaults, ...opt };
    return this;
  }
  lexer(src, options2) {
    return _Lexer.lex(src, options2 != null ? options2 : this.defaults);
  }
  parser(tokens, options2) {
    return _Parser.parse(tokens, options2 != null ? options2 : this.defaults);
  }
};
_parseMarkdown = new WeakSet();
parseMarkdown_fn = function(lexer2, parser2) {
  return (src, options2) => {
    const origOpt = { ...options2 };
    const opt = { ...this.defaults, ...origOpt };
    if (this.defaults.async === true && origOpt.async === false) {
      if (!opt.silent) {
        console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.");
      }
      opt.async = true;
    }
    const throwError = __privateMethod(this, _onError, onError_fn).call(this, !!opt.silent, !!opt.async);
    if (typeof src === "undefined" || src === null) {
      return throwError(new Error("marked(): input parameter is undefined or null"));
    }
    if (typeof src !== "string") {
      return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
    }
    if (opt.hooks) {
      opt.hooks.options = opt;
    }
    if (opt.async) {
      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer2(src2, opt)).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html) => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);
    }
    try {
      if (opt.hooks) {
        src = opt.hooks.preprocess(src);
      }
      const tokens = lexer2(src, opt);
      if (opt.walkTokens) {
        this.walkTokens(tokens, opt.walkTokens);
      }
      let html = parser2(tokens, opt);
      if (opt.hooks) {
        html = opt.hooks.postprocess(html);
      }
      return html;
    } catch (e) {
      return throwError(e);
    }
  };
};
_onError = new WeakSet();
onError_fn = function(silent, async) {
  return (e) => {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (silent) {
      const msg = "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
      if (async) {
        return Promise.resolve(msg);
      }
      return msg;
    }
    if (async) {
      return Promise.reject(e);
    }
    throw e;
  };
};
var markedInstance = new Marked();
function marked(src, opt) {
  return markedInstance.parse(src, opt);
}
marked.options = marked.setOptions = function(options2) {
  markedInstance.setOptions(options2);
  marked.defaults = markedInstance.defaults;
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = _getDefaults;
marked.defaults = _defaults;
marked.use = function(...args) {
  markedInstance.use(...args);
  marked.defaults = markedInstance.defaults;
  changeDefaults(marked.defaults);
  return marked;
};
marked.walkTokens = function(tokens, callback) {
  return markedInstance.walkTokens(tokens, callback);
};
marked.parseInline = markedInstance.parseInline;
marked.Parser = _Parser;
marked.parser = _Parser.parse;
marked.Renderer = _Renderer;
marked.TextRenderer = _TextRenderer;
marked.Lexer = _Lexer;
marked.lexer = _Lexer.lex;
marked.Tokenizer = _Tokenizer;
marked.Hooks = _Hooks;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parser = _Parser.parse;
var lexer = _Lexer.lex;

// node_modules/syllable/index.js
var import_pluralize = __toESM(require_pluralize2(), 1);
var import_normalize_strings = __toESM(require_normalize_strings(), 1);

// node_modules/syllable/problematic.js
var problematic = {
  abalone: 4,
  abare: 3,
  abbruzzese: 4,
  abed: 2,
  aborigine: 5,
  abruzzese: 4,
  acreage: 3,
  adame: 3,
  adieu: 2,
  adobe: 3,
  anemone: 4,
  anyone: 3,
  apache: 3,
  aphrodite: 4,
  apostrophe: 4,
  ariadne: 4,
  cafe: 2,
  calliope: 4,
  catastrophe: 4,
  chile: 2,
  chloe: 2,
  circe: 2,
  coyote: 3,
  daphne: 2,
  epitome: 4,
  eurydice: 4,
  euterpe: 3,
  every: 2,
  everywhere: 3,
  forever: 3,
  gethsemane: 4,
  guacamole: 4,
  hermione: 4,
  hyperbole: 4,
  jesse: 2,
  jukebox: 2,
  karate: 3,
  machete: 3,
  maybe: 2,
  naive: 2,
  newlywed: 3,
  penelope: 4,
  people: 2,
  persephone: 4,
  phoebe: 2,
  pulse: 1,
  queue: 1,
  recipe: 3,
  riverbed: 3,
  sesame: 3,
  shoreline: 2,
  simile: 3,
  snuffleupagus: 5,
  sometimes: 2,
  syncope: 3,
  tamale: 3,
  waterbed: 3,
  wednesday: 2,
  yosemite: 4,
  zoe: 2
};

// node_modules/syllable/index.js
var own = {}.hasOwnProperty;
var EXPRESSION_MONOSYLLABIC_ONE = new RegExp(
  [
    "awe($|d|so)",
    "cia(?:l|$)",
    "tia",
    "cius",
    "cious",
    "[^aeiou]giu",
    "[aeiouy][^aeiouy]ion",
    "iou",
    "sia$",
    "eous$",
    "[oa]gue$",
    ".[^aeiuoycgltdb]{2,}ed$",
    ".ely$",
    "^jua",
    "uai",
    "eau",
    "^busi$",
    "(?:[aeiouy](?:" + [
      "[bcfgklmnprsvwxyz]",
      "ch",
      "dg",
      "g[hn]",
      "lch",
      "l[lv]",
      "mm",
      "nch",
      "n[cgn]",
      "r[bcnsv]",
      "squ",
      "s[chkls]",
      "th"
    ].join("|") + ")ed$)",
    "(?:[aeiouy](?:" + [
      "[bdfklmnprstvy]",
      "ch",
      "g[hn]",
      "lch",
      "l[lv]",
      "mm",
      "nch",
      "nn",
      "r[nsv]",
      "squ",
      "s[cklst]",
      "th"
    ].join("|") + ")es$)"
  ].join("|"),
  "g"
);
var EXPRESSION_MONOSYLLABIC_TWO = new RegExp(
  "[aeiouy](?:" + [
    "[bcdfgklmnprstvyz]",
    "ch",
    "dg",
    "g[hn]",
    "l[lv]",
    "mm",
    "n[cgns]",
    "r[cnsv]",
    "squ",
    "s[cklst]",
    "th"
  ].join("|") + ")e$",
  "g"
);
var EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(
  "(?:" + [
    "([^aeiouy])\\1l",
    "[^aeiouy]ie(?:r|s?t)",
    "[aeiouym]bl",
    "eo",
    "ism",
    "asm",
    "thm",
    "dnt",
    "snt",
    "uity",
    "dea",
    "gean",
    "oa",
    "ua",
    "react?",
    "orbed",
    // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`
    "shred",
    // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`
    "eings?",
    "[aeiouy]sh?e[rs]"
  ].join("|") + ")$",
  "g"
);
var EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(
  [
    "creat(?!u)",
    "[^gq]ua[^auieo]",
    "[aeiou]{3}",
    "^(?:ia|mc|coa[dglx].)",
    "^re(app|es|im|us)",
    "(th|d)eist"
  ].join("|"),
  "g"
);
var EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(
  [
    "[^aeiou]y[ae]",
    "[^l]lien",
    "riet",
    "dien",
    "iu",
    "io",
    "ii",
    "uen",
    "[aeilotu]real",
    "real[aeilotu]",
    "iell",
    "eo[^aeiou]",
    "[aeiou]y[aeiou]"
  ].join("|"),
  "g"
);
var EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/;
var EXPRESSION_SINGLE = new RegExp(
  [
    "^(?:" + [
      "un",
      "fore",
      "ware",
      "none?",
      "out",
      "post",
      "sub",
      "pre",
      "pro",
      "dis",
      "side",
      "some"
    ].join("|") + ")",
    "(?:" + [
      "ly",
      "less",
      "some",
      "ful",
      "ers?",
      "ness",
      "cians?",
      "ments?",
      "ettes?",
      "villes?",
      "ships?",
      "sides?",
      "ports?",
      "shires?",
      "[gnst]ion(?:ed|s)?"
    ].join("|") + ")$"
  ].join("|"),
  "g"
);
var EXPRESSION_DOUBLE = new RegExp(
  [
    "^(?:" + [
      "above",
      "anti",
      "ante",
      "counter",
      "hyper",
      "afore",
      "agri",
      "infra",
      "intra",
      "inter",
      "over",
      "semi",
      "ultra",
      "under",
      "extra",
      "dia",
      "micro",
      "mega",
      "kilo",
      "pico",
      "nano",
      "macro",
      "somer"
    ].join("|") + ")",
    "(?:fully|berry|woman|women|edly|union|((?:[bcdfghjklmnpqrstvwxz])|[aeiou])ye?ing)$"
  ].join("|"),
  "g"
);
var EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g;
function syllable(value) {
  const values = (0, import_normalize_strings.default)(String(value)).toLowerCase().replace(/['’]/g, "").split(/\b/g);
  let index = -1;
  let sum = 0;
  while (++index < values.length) {
    sum += one(values[index].replace(/[^a-z]/g, ""));
  }
  return sum;
}
function one(value) {
  let count = 0;
  if (value.length === 0) {
    return count;
  }
  if (value.length < 3) {
    return 1;
  }
  if (own.call(problematic, value)) {
    return problematic[value];
  }
  const singular = (0, import_pluralize.default)(value, 1);
  if (own.call(problematic, singular)) {
    return problematic[singular];
  }
  const addOne = returnFactory(1);
  const subtractOne = returnFactory(-1);
  value = value.replace(EXPRESSION_TRIPLE, countFactory(3)).replace(EXPRESSION_DOUBLE, countFactory(2)).replace(EXPRESSION_SINGLE, countFactory(1));
  const parts = value.split(/[^aeiouy]+/);
  let index = -1;
  while (++index < parts.length) {
    if (parts[index] !== "") {
      count++;
    }
  }
  value.replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne).replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne);
  value.replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne);
  return count || 1;
  function countFactory(addition) {
    return counter;
    function counter() {
      count += addition;
      return "";
    }
  }
  function returnFactory(addition) {
    return returner;
    function returner($0) {
      count += addition;
      return $0;
    }
  }
}

// AnalysisGenerator.ts
var PlainTextRenderer = require_marked_plaintext();
var renderer = new PlainTextRenderer();
var AnalysisGenerator = class {
  constructor(plugin) {
    this.analysisMetrics = [
      { id: "Char", active: true, label: "Character Count", value: "0" },
      { id: "Lettr", active: true, label: "Letter Count", value: "0" },
      { id: "Word", active: true, label: "Word Count", value: "0" },
      { id: "Sent", active: true, label: "Sentence Count", value: "0" },
      { id: "Para", active: true, label: "Paragraph Count", value: "0" },
      { id: "Syll", active: true, label: "Syllable Count", value: "0" },
      { id: "ASen", active: true, label: "Average Words per Sentence", value: "0" },
      { id: "ASyl", active: true, label: "Average Syllables per Word", value: "0" },
      { id: "AChr", active: true, label: "Average Characters per Word", value: "0" },
      { id: "Diff", active: true, label: "% of Difficult Words", value: "0" },
      { id: "SenC", active: true, label: "Sentence Complexity", value: "0" },
      { id: "LexD", active: true, label: "Lexical Diversity", value: "0" },
      { id: "FREs", active: true, label: "Flesch Reading Ease Score", value: "0" },
      { id: "FRDf", active: true, label: "Flesch Reading Difficulty", value: "0" },
      { id: "FKGL", active: true, label: "Flesch-Kincaid Grade Level", value: "0" },
      { id: "GFog", active: true, label: "Gunning Fog Index", value: "0" },
      { id: "SMOG", active: true, label: "SMOG Index", value: "0" },
      { id: "FCST", active: true, label: "FORCAST Grade Level", value: "0" },
      { id: "ARI", active: true, label: "Automated Readability Index", value: "0" },
      { id: "CLI", active: true, label: "Coleman-Liau Index", value: "0" },
      { id: "LWri", active: true, label: "Linsear Write", value: "0" },
      { id: "NDCh", active: true, label: "New Dale-Chall Score", value: "0" },
      { id: "PSK", active: true, label: "Powers Sumner Kearl Grade", value: "0" },
      { id: "RIX", active: true, label: "Rix Readability ", value: "0" },
      { id: "RIXD", active: true, label: "Rix Difficulty ", value: "0" },
      { id: "LIX", active: true, label: "Lix Readability ", value: "0" },
      { id: "LIXD", active: true, label: "Lix Difficulty ", value: "0" },
      { id: "GrdM", active: true, label: "Grade level (consensus)", value: "0" },
      { id: "Rdbl", active: true, label: "Readability Rating", value: "0" },
      { id: "GrdL", active: true, label: "Reading level", value: "0" },
      { id: "RdTm", active: true, label: "Reading time", value: "0:00" },
      { id: "SpkT", active: true, label: "Speaking time", value: "0:00" }
    ];
    this.plugin = plugin;
  }
  displayAnalysis() {
    const container = document.createElement("div");
    container.style.marginLeft = "0";
    container.style.marginRight = "0";
    container.style.overflowY = "auto";
    container.style.maxHeight = "800px";
    const table = document.createElement("table");
    table.classList.add("nav-folder-title");
    table.style.width = "100%";
    table.style.borderCollapse = "collapse";
    const tbody = document.createElement("tbody");
    table.appendChild(tbody);
    this.analysisMetrics.forEach((item) => {
      if (item.active) {
        const row = tbody.insertRow();
        const labelCell = row.insertCell();
        labelCell.textContent = item.label;
        labelCell.style.textAlign = "left";
        const valueCell = row.insertCell();
        valueCell.textContent = item.value;
        valueCell.dataset.id = item.id;
        valueCell.style.textAlign = "right";
      }
    });
    tbody.querySelectorAll("td").forEach((cell) => {
      cell.style.padding = "2px 10px 2px 0px";
      cell.style.width = "100%";
      cell.style.whiteSpace = "nowrap";
      const color = window.getComputedStyle(document.body).color.match(/\d+/g);
      if (color) {
        cell.style.borderBottom = `1px solid rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.05)`;
      } else {
        cell.style.borderBottom = "1px solid rgba(0, 0, 0, 0.05)";
      }
    });
    container.appendChild(table);
    const spacer = document.createElement("div");
    spacer.style.height = "30px";
    container.appendChild(spacer);
    return container;
  }
  removeMarkdownFormatting(text) {
    console.log(marked(text, { renderer }));
    return marked(text, { renderer }).replace(/^#+\s+/gm, "").replace(/(\*\*|\*|__|_)(.*?)\1/g, "$2").replace(/\[([^\]]+)\]\(([^)]+)\)/g, "$1").replace(/!\[([^\]]*)\]\(([^)]+)\)/g, "").replace(/^>\s+/gm, "").replace(/^[-*_]{3,}\s*$/gm, "").replace(/`([^`]*)`/g, "$1").replace(/```([\s\S]*?)```/g, "$1").replace(/^\s*[*\-+]\s+/gm, "").replace(/^\s*\d+\.\s+/gm, "").replace(/^\s*\[([^]]+)\]:\s*(.+)$/gm, "").replace(/\[\[([^\]]+)\]\]/g, " $1 ").replace(/\[\[0\s+([^\|]+)\|([^\]]+)\]\]/g, " $2 ").replace(/\[\[0\s+[^\|]+\|([^\]]+)\]\]/g, " $1 ");
  }
  async calculateAndUpdate(id, calculation) {
    const result = await Promise.resolve(calculation());
    const valueCell = document.querySelector(`td[data-id="${id}"]`);
    if (valueCell) {
      valueCell.textContent = result;
    }
    const metric = this.analysisMetrics.find((metric2) => metric2.id === id);
    if (metric) {
      metric.value = result;
    }
  }
  updateAnalysisValues() {
    let text;
    const selection = window.getSelection();
    if (selection && selection.toString().length > 0) {
      this.plugin.updateHeaderElementContent("Selection");
      text = this.removeMarkdownFormatting(selection.toString());
    } else {
      this.plugin.updateHeaderElementContent("Document");
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        const editor = activeView.editor;
        text = this.removeMarkdownFormatting(editor.getValue());
      } else {
        return;
      }
    }
    this.calculateAndUpdate("Char", () => textReadability.charCount(text, false).toString());
    this.calculateAndUpdate("Lettr", () => textReadability.letterCount(text).toString());
    this.calculateAndUpdate("Word", () => {
      const matches = text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu);
      return matches ? matches.length.toString() : "0";
    });
    this.calculateAndUpdate("Sent", () => textReadability.sentenceCount(text).toString());
    this.calculateAndUpdate("Para", () => {
      const matches = text.match(/[^\n]+\s*/g);
      return matches ? matches.length.toString() : "0";
    });
    this.calculateAndUpdate("Syll", () => textReadability.syllableCount(text).toString());
    this.calculateAndUpdate("ASen", () => textReadability.averageSentenceLength(text).toString());
    this.calculateAndUpdate("ASyl", () => textReadability.averageSyllablePerWord(text).toString());
    this.calculateAndUpdate("AChr", () => textReadability.averageCharacterPerWord(text).toString());
    this.calculateAndUpdate("Diff", () => {
      const matches = text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu);
      const words = matches ? matches.length : 0;
      const difficult = textReadability.difficultWords(text, 3);
      const result = difficult / words * 100;
      return result === 0 ? "0%" : parseFloat(result.toFixed(2)) + "%";
    });
    this.calculateAndUpdate("SenC", () => {
      const sentences = text.split(/[.!?]+/).filter(Boolean);
      const totalClauses = sentences.reduce((total, sentence) => {
        const clauseMarkers = /,|;|and|or|but|although|because/g;
        return total + sentence.split(clauseMarkers).length;
      }, 0);
      return (sentences.length > 0 ? totalClauses / sentences.length : 0).toFixed(1);
    });
    this.calculateAndUpdate("LexD", () => textReadability.lexiconCount(text).toString());
    this.calculateAndUpdate("GrdL", () => textReadability.textStandard(text).toString());
    this.calculateAndUpdate("GrdM", () => textReadability.textMedian(text).toString());
    this.calculateAndUpdate("FREs", () => textReadability.fleschReadingEase(text).toString());
    this.calculateAndUpdate("FRDf", () => AnalysisGenerator.getDifficultyFromScore(textReadability.fleschReadingEase(text)));
    this.calculateAndUpdate("FKGL", () => textReadability.fleschKincaidGrade(text).toString());
    this.calculateAndUpdate("GFog", () => textReadability.gunningFog(text).toFixed(1));
    this.calculateAndUpdate("SMOG", () => textReadability.smogIndex(text).toFixed(1));
    this.calculateAndUpdate("FCST", () => AnalysisGenerator.getFORCAST(text).toFixed(1));
    this.calculateAndUpdate("ARI", () => textReadability.automatedReadabilityIndex(text).toString());
    this.calculateAndUpdate("CLI", () => textReadability.colemanLiauIndex(text).toString());
    this.calculateAndUpdate("LWri", () => textReadability.linsearWriteFormula(text).toString());
    this.calculateAndUpdate("NDCh", () => textReadability.daleChallReadabilityScore(text).toString());
    this.calculateAndUpdate("PSK", () => {
      const words = (text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu) || []).filter(Boolean);
      const sentenceCount2 = textReadability.sentenceCount(text);
      if (sentenceCount2 === 0) {
        return "0";
      }
      const averageSentenceLength2 = words.length / sentenceCount2;
      const averageWordLength = words.reduce((acc, word) => acc + syllable(word), 0) / words.length;
      return (0.0778 * averageSentenceLength2 + 0.0455 * averageWordLength + 2.797).toFixed(2);
    });
    this.calculateAndUpdate("RIX", () => {
      const longWords = text.match(/\b\w{6,}\b/g) || [];
      const sentenceCount2 = textReadability.sentenceCount(text);
      if (sentenceCount2 === 0) {
        return "0";
      }
      const rixScore = longWords.length / sentenceCount2;
      return rixScore.toFixed(1);
    });
    this.calculateAndUpdate("RIXD", () => {
      const longWords = text.match(/\b\w{6,}\b/g) || [];
      const sentenceCount2 = textReadability.sentenceCount(text);
      if (sentenceCount2 === 0) {
        return "";
      }
      const rixScore = longWords.length / sentenceCount2;
      if (rixScore < 4) {
        return "Easy";
      } else if (rixScore >= 4 && rixScore < 6) {
        return "Moderate";
      } else
        return "Complex";
    });
    this.calculateAndUpdate("LIX", () => {
      const words = text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu) || [];
      const longWords = words.filter((word) => word.length > 6);
      const sentenceCount2 = textReadability.sentenceCount(text);
      if (sentenceCount2 === 0 || words.length === 0) {
        return "0";
      }
      const lixScore = words.length / sentenceCount2 + longWords.length / words.length * 100;
      return lixScore.toFixed(1);
    });
    this.calculateAndUpdate("LIXD", () => {
      const words = text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu) || [];
      const longWords = words.filter((word) => word.length > 6);
      const sentenceCount2 = textReadability.sentenceCount(text);
      if (sentenceCount2 === 0 || words.length === 0) {
        return "";
      }
      const lixScore = words.length / sentenceCount2 + longWords.length / words.length * 100;
      if (lixScore < 30) {
        return "Very easy";
      } else if (lixScore < 40) {
        return "Easy";
      } else if (lixScore < 50) {
        return "Medium";
      } else if (lixScore < 60) {
        return "Difficult";
      } else
        return "Very difficult";
    });
    this.calculateAndUpdate("RdTm", () => AnalysisGenerator.getReadingTimes(text));
    this.calculateAndUpdate("SpkT", () => AnalysisGenerator.getSpeakingTimes(text));
    this.calculateAndUpdate("Rdbl", () => {
      const score = parseFloat(textReadability.textMedian(text));
      if (score >= 7 && score <= 8) {
        return "A";
      } else if (score >= 6 && score < 7 || score >= 8.1 && score < 9) {
        return "A-";
      } else if (score >= 5 && score < 6 || score >= 9 && score < 10) {
        return "B+";
      } else if (score >= 4 && score < 5 || score >= 10 && score < 11) {
        return "B";
      } else if (score >= 3 && score < 4 || score >= 11 && score < 12) {
        return "B-";
      } else if (score >= 2 && score < 3 || score >= 12 && score < 13) {
        return "C+";
      } else if (score >= 1 && score < 2 || score >= 13 && score < 14) {
        return "C";
      } else if (score === 1 || score >= 14 && score < 15) {
        return "C-";
      } else if (score >= 15) {
        return "D";
      } else {
        return "Invalid Score";
      }
    });
  }
  static getDifficultyFromScore(score) {
    if (score >= 90 && score <= 100) {
      return "Very Easy";
    } else if (score >= 80 && score < 90) {
      return "Easy";
    } else if (score >= 70 && score < 80) {
      return "Fairly Easy";
    } else if (score >= 60 && score < 70) {
      return "Standard";
    } else if (score >= 50 && score < 60) {
      return "Fairly Difficult";
    } else if (score >= 30 && score < 50) {
      return "Difficult";
    } else {
      return "Very Confusing";
    }
  }
  static getFORCAST(text) {
    const words = text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu) || [];
    let oneSyllableWordCount = 0;
    words.forEach((word) => {
      if (syllable(word) === 1) {
        oneSyllableWordCount++;
      }
    });
    const wordCount = words.length;
    const scaledOneSyllableCount = oneSyllableWordCount / words.length * 150;
    const forcastScore = 20 - scaledOneSyllableCount / 10;
    return forcastScore;
  }
  static getReadingTimes(text) {
    const wordCount = (text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu) || []).length;
    const fastTime = AnalysisGenerator.convertToHMS(wordCount / 250);
    const slowTime = AnalysisGenerator.convertToHMS(wordCount / 200);
    return `${fastTime} - ${slowTime}`;
  }
  static getSpeakingTimes(text) {
    const wordCount = (text.match(/\b\p{L}(['\-\p{L}\p{N}]*\p{L})?\b/gu) || []).length;
    const fastTime = AnalysisGenerator.convertToHMS(wordCount / 150);
    const slowTime = AnalysisGenerator.convertToHMS(wordCount / 125);
    return `${fastTime} - ${slowTime}`;
  }
  static convertToHMS(minutes) {
    const totalSeconds = Math.round(minutes * 60);
    const hours = Math.floor(totalSeconds / 3600);
    const minutesLeft = Math.floor((totalSeconds - hours * 3600) / 60);
    const seconds = totalSeconds - hours * 3600 - minutesLeft * 60;
    let timeString = "";
    if (hours > 0) {
      timeString += `${hours}:`;
    }
    if (minutesLeft > 0 || hours > 0) {
      timeString += `${hours > 0 ? minutesLeft.toString().padStart(2, "0") : minutesLeft}:`;
    }
    timeString += minutesLeft > 0 ? seconds.toString().padStart(2, "0") : seconds;
    if (hours === 0 && minutesLeft === 0) {
      timeString += "s";
    }
    return timeString;
  }
};

// main.ts
var import_obsidian2 = require("obsidian");
var TextAnalysisView = class extends import_obsidian2.ItemView {
  constructor(leaf, analysisGenerator) {
    super(leaf);
    this.analysisGenerator = analysisGenerator;
  }
  getIcon() {
    return "eye";
  }
  getViewType() {
    return "textAnalysis-view";
  }
  getDisplayText() {
    return "Text Analysis";
  }
  updateDisplay() {
    const { containerEl } = this;
    containerEl.empty();
    const content = this.analysisGenerator.displayAnalysis();
    containerEl.appendChild(content);
  }
  async onOpen() {
    super.onOpen();
    this.updateDisplay();
    this.analysisGenerator.updateAnalysisValues();
    this.boundHandleSelectionChange = this.handleSelectionChange.bind(this);
    this.boundHandleKeydown = this.handleKeydown.bind(this);
    this.boundHandleMouseUp = this.handleMouseUp.bind(this);
    document.addEventListener("selectionchange", this.boundHandleSelectionChange);
    document.addEventListener("keydown", this.boundHandleKeydown);
    document.addEventListener("mouseup", this.boundHandleMouseUp);
  }
  async onClose() {
    document.removeEventListener("selectionchange", this.boundHandleSelectionChange);
    document.removeEventListener("keydown", this.boundHandleKeydown);
    document.removeEventListener("mouseup", this.boundHandleMouseUp);
    this.boundHandleSelectionChange = null;
    this.boundHandleKeydown = null;
    this.boundHandleMouseUp = null;
  }
  handleSelectionChange() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf && activeLeaf.view instanceof import_obsidian2.MarkdownView) {
      const editor = activeLeaf.view.editor;
      const selection = editor.getSelection();
      if (selection) {
        if (this.updateTimeout !== void 0) {
          clearTimeout(this.updateTimeout);
        }
        this.updateTimeout = window.setTimeout(() => {
          this.analysisGenerator.updateAnalysisValues();
          this.updateTimeout = void 0;
        }, 500);
      }
    }
  }
  handleKeydown(event) {
    if (this.updateTimeout !== null) {
      clearTimeout(this.updateTimeout);
    }
    this.updateTimeout = window.setTimeout(() => {
      this.analysisGenerator.updateAnalysisValues();
      this.updateTimeout = void 0;
    }, 500);
  }
  handleMouseUp() {
    const selection = window.getSelection();
    if (selection && selection.toString() == "") {
      if (this.updateTimeout !== void 0) {
        clearTimeout(this.updateTimeout);
      }
      this.updateTimeout = window.setTimeout(() => {
        this.analysisGenerator.updateAnalysisValues();
        this.updateTimeout = void 0;
      }, 500);
    }
  }
};
var TextAnalysisSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin, analysisGenerator) {
    super(app, plugin);
    this.plugin = plugin;
    this.analysisGenerator = analysisGenerator;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Text Analysis" });
    if (!this.plugin.settings.analysisMetricsSettings) {
      this.plugin.settings.analysisMetricsSettings = {};
      this.plugin.analysisGenerator.analysisMetrics.forEach((metric) => {
        this.plugin.settings.analysisMetricsSettings[metric.id] = metric.active;
      });
    }
    this.plugin.analysisGenerator.analysisMetrics.forEach((metric) => {
      new import_obsidian2.Setting(containerEl).setName(metric.label).addToggle(
        (toggle) => toggle.setValue(this.plugin.settings.analysisMetricsSettings[metric.id]).onChange(async (value) => {
          this.plugin.settings.analysisMetricsSettings[metric.id] = value;
          const metricToUpdate = this.plugin.analysisGenerator.analysisMetrics.find((m) => m.id === metric.id);
          if (metricToUpdate) {
            metricToUpdate.active = value;
            this.analysisGenerator.updateAnalysisValues();
          }
          const leaf = this.plugin.app.workspace.getLeavesOfType("textAnalysis-view")[0];
          if (leaf) {
            const view = leaf.view;
            if (view instanceof TextAnalysisView) {
              view.updateDisplay();
            }
          }
          await this.plugin.saveSettings();
        })
      );
    });
  }
};
var TextAnalysisPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.textAnalysisView = null;
    this.headerElement = null;
  }
  async onload() {
    this.settings = Object.assign({}, await this.loadData());
    this.settings.analysisMetricsSettings = this.settings.analysisMetricsSettings || {};
    this.analysisGenerator = new AnalysisGenerator(this);
    this.analysisGenerator.analysisMetrics.forEach((metric) => {
      var _a;
      metric.active = (_a = this.settings.analysisMetricsSettings[metric.id]) != null ? _a : true;
    });
    this.addRibbonIcon("eye", "Text Analysis", async () => {
      await this.activateView();
    });
    this.addSettingTab(new TextAnalysisSettingTab(this.app, this, this.analysisGenerator));
    this.addCommand({
      id: "open-textAnalysis-panel",
      name: "Open Text Analysis Panel",
      callback: () => this.activateView()
    });
    this.registerView("textAnalysis-view", (leaf) => {
      this.textAnalysisView = new TextAnalysisView(leaf, this.analysisGenerator);
      return this.textAnalysisView;
    });
    this.activateView();
    this.headerElement = document.createElement("style");
    this.updateHeaderElementContent("Document");
    document.head.appendChild(this.headerElement);
  }
  updateHeaderElementContent(title) {
    if (this.headerElement) {
      this.headerElement.textContent = `
            .mod-right-split > .workspace-tabs:not(.mod-top) .workspace-tab-header-spacer:after  {
                    display: flex;
                    align-items: center;
                    font-weight: bold;
                    content: '${"Text analysis - " + title}';
                }
            `;
    }
  }
  onunload() {
    if (this.headerElement && document.head.contains(this.headerElement)) {
      document.head.removeChild(this.headerElement);
      this.headerElement = null;
      const leaves = this.app.workspace.getLeavesOfType("textAnalysis-view");
      if (leaves.length > 0) {
        this.app.workspace.detachLeavesOfType("textAnalysis-view");
      }
    }
  }
  async activateView() {
    let leaf = this.app.workspace.getLeavesOfType("textAnalysis-view")[0];
    if (leaf) {
      if (leaf.view instanceof TextAnalysisView) {
        this.app.workspace.detachLeavesOfType("textAnalysis-view");
      } else {
        this.app.workspace.revealLeaf(leaf);
      }
    } else {
      leaf = this.app.workspace.getRightLeaf(true);
      await leaf.setViewState({ type: "textAnalysis-view", active: true });
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
